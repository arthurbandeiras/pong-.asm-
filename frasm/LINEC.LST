     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                    		mov 		ax,data
     8 00000003 8ED8                        		mov 		ds,ax
     9 00000005 B8[0000]                    		mov 		ax,stack
    10 00000008 8ED0                        		mov 		ss,ax
    11 0000000A BC[0002]                    		mov 		sp,stacktop
    12                                  
    13                                  
    14                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    15 0000000D B40F                                mov  		ah,0Fh
    16 0000000F CD10                        		int  		10h
    17 00000011 A2[0100]                    		mov  		[modo_anterior],al   
    18                                  
    19                                  
    20                                  ; alterar modo de video para gr�fico 640x480 16 cores
    21 00000014 B012                        	mov     	al,12h
    22 00000016 B400                       		mov     	ah,0
    23 00000018 CD10                        	int     	10h
    24                                  
    25                                  
    26                                  
    27                                  ;***************************************************;
    28                                  ;			   definições pré código				;
    29                                  ;***************************************************;
    30                                  
    31                                  ;limpa si, di, e define onde a bolinha começa
    32 0000001A 31F6                    		xor si, si
    33 0000001C 31FF                    		xor di, di
    34 0000001E BE3F01                  		mov si, 319
    35 00000021 BFF000                  		mov di, 240
    36 00000024 B950C3                  		mov cx, 50000 ;define a quantidade de loops completos (tempo de jogo)
    37 00000027 E8A502                  		call set_caracter1
    38                                  desenha_cabecalho:
    39 0000002A C606[0000]0F            	mov		byte[cor],branco_intenso	;borda cabeçalho (x1, y1, x2, y2)
    40 0000002F B80000                  	mov		ax,0
    41 00000032 50                      	push		ax
    42 00000033 B8AF01                  	mov		ax,431
    43 00000036 50                      	push		ax
    44 00000037 B88002                  	mov		ax,640
    45 0000003A 50                      	push		ax
    46 0000003B B8AF01                  	mov		ax,431
    47 0000003E 50                      	push		ax
    48 0000003F E8F904                  	call line
    49 00000042 58                      	pop ax
    50 00000043 58                      	pop ax
    51 00000044 58                      	pop ax
    52                                  
    53                                  main:
    54                                  	
    55 00000045 C606[0000]0F            	mov		byte[cor],branco_intenso	;raquete (x1, y1, x2, y2)
    56 0000004A B85702                  	mov		ax,599
    57 0000004D 50                      	push		ax
    58 0000004E A1[8B00]                	mov		ax,word[raqi]
    59 00000051 50                      	push		ax
    60 00000052 B85702                  	mov		ax,599
    61 00000055 50                      	push		ax
    62 00000056 A1[8D00]                	mov		ax,word[raqf]
    63 00000059 50                      	push		ax
    64 0000005A E8DE04                  	call line
    65 0000005D 58                      	pop ax
    66 0000005E 58                      	pop ax
    67 0000005F 58                      	pop ax
    68                                  
    69                                  	;circulos vermelhos
    70 00000060 C606[0000]04            	mov     byte[cor],vermelho  
    71 00000065 89F0                    	mov     ax, si
    72 00000067 50                      	push        ax
    73 00000068 89F8                    	mov     ax, di
    74 0000006A 50                      	push        ax
    75 0000006B B80A00                  	mov     ax,10
    76 0000006E 50                      	push        ax
    77 0000006F E80C04                  	call full_circle
    78                                  	
    79 00000072 B90100                  	mov cx, 1
    80 00000075 51                      	push cx
    81 00000076 BA0200                  	mov dx, 2
    82 00000079 52                      	push dx
    83 0000007A B000                    	mov al, 0 
    84 0000007C B486                    	mov ah, 86h
    85 0000007E CD15                    	int 15h		;função delay
    86 00000080 59                      	pop cx
    87 00000081 5A                      	pop dx
    88                                  
    89 00000082 58                      	pop ax
    90 00000083 58                      	pop ax
    91 00000084 58                      	pop ax
    92                                  
    93                                  	;apaga circulos (circulos pretos)
    94 00000085 C606[0000]00            	mov     byte[cor],preto
    95 0000008A 89F0                    	mov     ax, si
    96 0000008C 50                      	push        ax
    97 0000008D 89F8                    	mov     ax, di
    98 0000008F 50                      	push        ax
    99 00000090 B80A00                  	mov     ax,10
   100 00000093 50                      	push        ax
   101 00000094 E8E703                  	call full_circle
   102 00000097 58                      	pop ax
   103 00000098 58                      	pop ax
   104 00000099 58                      	pop ax		
   105                                  
   106                                  
   107 0000009A 0336[8200]              	add si, word[vx]
   108 0000009E 033E[8400]              	add di, word[vy]
   109                                  
   110                                  
   111 000000A2 81FF1400                	cmp di, 20
   112 000000A6 7E1D                    	jle bate_baixo
   113                                  volta1:
   114 000000A8 81FE6C02                	cmp si, 620
   115 000000AC 7D22                    	jge bate_direita 
   116                                  volta2:
   117 000000AE 81FF9501                	cmp di, 405
   118 000000B2 7D2E                    	jge bate_cima
   119                                  volta3:
   120 000000B4 81FE1400                	cmp si, 20
   121 000000B8 7E37                    	jle	bate_esquerda
   122                                  volta4:
   123 000000BA B401                    	mov ah, 01h
   124 000000BC CD16                    	int 16h
   125 000000BE 7563                    	jnz tecla_clicada
   126 000000C0 E83900                  	call bate_raquete
   127                                  checagem:
   128 000000C3 E280                    loop main
   129                                  
   130                                  bate_baixo:
   131 000000C5 A1[8600]                	mov ax, word[vatual]
   132 000000C8 50                      	push ax
   133 000000C9 A3[8400]                	mov word[vy], ax
   134 000000CC 58                      	pop ax  
   135 000000CD E9D8FF                  jmp volta1
   136                                  
   137                                  bate_direita:
   138 000000D0 B8FFFF                  	mov ax, -1
   139 000000D3 50                      	push ax
   140 000000D4 F726[8600]              	mul word[vatual]
   141 000000D8 A3[8200]                	mov word[vx], ax
   142 000000DB 58                      	pop ax
   143 000000DC E8AF01                  	call ponto_comp    
   144 000000DF E9CCFF                  jmp volta2
   145                                  
   146                                  bate_cima:
   147 000000E2 B8FFFF                  	mov ax, -1
   148 000000E5 50                      	push ax
   149 000000E6 F726[8600]              	mul word[vatual]
   150 000000EA A3[8400]                	mov word[vy], ax
   151 000000ED 58                      	pop ax
   152 000000EE E9C3FF                  jmp volta3
   153                                  
   154                                  bate_esquerda:
   155 000000F1 A1[8600]                	mov ax, word[vatual]
   156 000000F4 50                      	push ax
   157 000000F5 A3[8200]                	mov word[vx], ax
   158 000000F8 58                      	pop ax
   159 000000F9 E9BEFF                  jmp volta4
   160                                  
   161                                  bate_raquete:
   162 000000FC 81FE4D02                	cmp si, 589
   163 00000100 7CC1                    	jl checagem	
   164 00000102 3B3E[8B00]              	cmp di, word[raqi]	;vê se x é menor
   165 00000106 7CBB                    	jl checagem	
   166 00000108 3B3E[8D00]              	cmp di, word[raqf]	;vê se x é maior
   167 0000010C 7FB5                    	jg checagem
   168 0000010E B8FFFF                  	mov ax, -1		;passou na checagem, inverte vx
   169 00000111 50                      	push ax
   170 00000112 F726[8600]              	mul word[vatual]
   171 00000116 A3[8200]                	mov word[vx], ax 
   172 00000119 58                      	pop ax
   173 0000011A E83001                  	call ponto_player
   174 0000011D E9A3FF                  jmp checagem
   175                                  
   176                                  move_main:
   177 00000120 E922FF                  	jmp main
   178                                  
   179                                  tecla_clicada:
   180 00000123 B408                    	mov ah, 08h
   181 00000125 CD21                    	int 21h
   182 00000127 3C73                    	cmp al, 's' ; 's'
   183 00000129 747A                    	jz move_encerra
   184 0000012B 3C63                    	cmp al, 'c' ; 'c'
   185 0000012D 740F                    	jz raquete_cima
   186 0000012F 3C62                    	cmp al, 'b'	; 'b'
   187 00000131 743D                    	jz raquete_baixo
   188 00000133 3C6D                    	cmp al, 'm' ; 'm'
   189 00000135 7474                    	jz reduz_velo
   190 00000137 3C70                    	cmp al, 'p' ; 'p'
   191 00000139 746D                    	jz move_aumenta_velo
   192 0000013B E907FF                  jmp main
   193                                  
   194                                  raquete_cima:
   195 0000013E 813E[8D00]9F01          	cmp word[raqf], 415
   196 00000144 7DDA                    	jge move_main
   197 00000146 C606[0000]00            	mov		byte[cor],preto		;apaga raquete antiga;
   198 0000014B B85702                  	mov		ax,599
   199 0000014E 50                      	push		ax
   200 0000014F A1[8B00]                	mov		ax,word[raqi]
   201 00000152 50                      	push		ax
   202 00000153 B85702                  	mov		ax,599
   203 00000156 50                      	push		ax
   204 00000157 A1[8D00]                	mov		ax,word[raqf]
   205 0000015A 50                      	push		ax
   206 0000015B E8DD03                  	call line
   207 0000015E 58                      	pop ax
   208 0000015F 58                      	pop ax
   209 00000160 58                      	pop ax
   210 00000161 8106[8B00]0F00          	add word[raqi], 15		;aumenta raqi e raqf;
   211 00000167 8106[8D00]0F00          	add word[raqf], 15
   212 0000016D E9D5FE                  jmp main
   213                                  
   214                                  raquete_baixo:
   215 00000170 813E[8B00]0F00          	cmp word[raqi], 15
   216 00000176 7EA8                    	jle move_main
   217 00000178 C606[0000]00            	mov		byte[cor],preto		;apaga raquete antiga;
   218 0000017D B85702                  	mov		ax,599
   219 00000180 50                      	push		ax
   220 00000181 A1[8B00]                	mov		ax,word[raqi]
   221 00000184 50                      	push		ax
   222 00000185 B85702                  	mov		ax,599
   223 00000188 50                      	push		ax
   224 00000189 A1[8D00]                	mov		ax,word[raqf]
   225 0000018C 50                      	push		ax
   226 0000018D E8AB03                  	call line
   227 00000190 58                      	pop ax
   228 00000191 58                      	pop ax
   229 00000192 58                      	pop ax
   230 00000193 8106[8B00]F1FF          	add word[raqi], -15		;aumenta raqi e raqf;
   231 00000199 8106[8D00]F1FF          	add word[raqf], -15
   232 0000019F E9A3FE                  jmp main
   233                                  
   234                                  move_main2:
   235 000001A2 E9A0FE                  	jmp main
   236                                  move_encerra:
   237 000001A5 E99001                  	jmp encerra
   238                                  move_aumenta_velo:
   239 000001A8 E92D00                  	jmp aumenta_velo
   240                                  
   241                                  reduz_velo:					;função chamada com 'm'
   242 000001AB 813E[8600]0400          	cmp word[vatual], 4
   243 000001B1 7EEF                    	jle move_main2
   244 000001B3 8106[8600]FCFF          	add word[vatual], -4
   245 000001B9 8006[8800]FF            	add byte[v_printa_int], -1
   246 000001BE E84D01                  	call altera_v_printa
   247                                  	
   248 000001C1 813E[8200]0000          	cmp word[vx], 0
   249 000001C7 7C3C                    	jl reduz_vx_neg
   250 000001C9 7F43                    	jg reduz_vx_pos
   251                                  vy_reduz:					;tag para os casos de mudança
   252 000001CB 813E[8400]0000          	cmp word[vy], 0
   253 000001D1 7C56                    	jl reduz_vy_neg
   254 000001D3 7F5D                    	jg reduz_vy_pos
   255 000001D5 E948FF                  	jmp move_main
   256                                  
   257                                  aumenta_velo:				;função chamada com 'p'
   258 000001D8 813E[8600]0C00          	cmp word[vatual], 12
   259 000001DE 7DC2                    	jge move_main2
   260 000001E0 8106[8600]0400          	add word[vatual], 4
   261 000001E6 8006[8800]01            	add byte[v_printa_int], 1
   262 000001EB E82001                  	call altera_v_printa
   263                                  	
   264 000001EE 813E[8200]0000          	cmp word[vx], 0
   265 000001F4 7C21                    	jl aumenta_vx_neg
   266 000001F6 7F28                    	jg aumenta_vx_pos
   267                                  vy_aumenta:					;tag para os casos de mudança
   268 000001F8 813E[8400]0000          	cmp word[vy], 0
   269 000001FE 7C3B                    	jl aumenta_vy_neg
   270 00000200 7F42                    	jg aumenta_vy_pos
   271 00000202 E91BFF                  	jmp move_main
   272                                  
   273                                  reduz_vx_neg:			;casos de mudança de velocidade
   274 00000205 8106[8200]0400          	add word[vx], 4
   275 0000020B E9BDFF                  	jmp vy_reduz
   276                                  reduz_vx_pos:
   277 0000020E 8106[8200]FCFF          	add word[vx], -4
   278 00000214 E9B4FF                  	jmp vy_reduz
   279                                  aumenta_vx_neg:
   280 00000217 8106[8200]FCFF          	add word[vx], -4
   281 0000021D E9D8FF                  	jmp vy_aumenta
   282                                  aumenta_vx_pos:
   283 00000220 8106[8200]0400          	add word[vx], 4
   284 00000226 E9CFFF                  	jmp vy_aumenta
   285                                  reduz_vy_neg:
   286 00000229 8106[8400]0400          	add word[vy], 4
   287 0000022F E9EEFE                  	jmp move_main
   288                                  reduz_vy_pos:
   289 00000232 8106[8400]FCFF          	add word[vy], -4
   290 00000238 E9E5FE                  	jmp move_main
   291                                  aumenta_vy_neg:
   292 0000023B 8106[8400]FCFF          	add word[vy], -4
   293 00000241 E9DCFE                  	jmp move_main
   294                                  aumenta_vy_pos:
   295 00000244 8106[8400]0400          	add word[vy], 4
   296 0000024A E9D3FE                  	jmp move_main
   297                                  
   298                                  
   299                                  ponto_player:
   300 0000024D 31C0                    	xor ax, ax
   301 0000024F 31D2                    	xor dx, dx
   302 00000251 8106[8F00]0100          	add word[ponto_play], 1
   303 00000257 A1[8F00]                	mov ax, word[ponto_play]
   304 0000025A 50                      	push ax
   305 0000025B B90A00                  	mov cx, 10
   306 0000025E 51                      	push cx
   307 0000025F F7F1                    	div cx
   308 00000261 80C230                  	add dl, '0'
   309 00000264 8816[9400]              	mov byte[pnt_play_str + 1], dl
   310 00000268 0430                    	add al, '0'
   311 0000026A A2[9300]                	mov byte[pnt_play_str], al
   312 0000026D 59                      	pop cx
   313 0000026E 58                      	pop ax
   314                                  set_ponto_player:
   315 0000026F B90200                  	mov     	cx,2			;n�mero de caracteres
   316 00000272 BB0000                      mov     	bx,0
   317 00000275 B601                        mov     	dh,1			;linha 0-29
   318 00000277 B219                        mov     	dl,25			;coluna 0-79
   319 00000279 C606[0000]0F            	mov		byte[cor],branco_intenso
   320                                  print_player:
   321 0000027E E8C300                  		call	cursor
   322 00000281 8A87[9300]                  	mov     al,[bx+pnt_play_str]
   323 00000285 E8D300                  		call	caracter
   324 00000288 43                          	inc     bx			;proximo caracter
   325 00000289 FEC2                    		inc		dl			;avanca a coluna
   326 0000028B E2F1                        	loop    print_player
   327 0000028D C3                      	ret
   328                                  
   329                                  ponto_comp:
   330 0000028E 31C0                    	xor ax, ax
   331 00000290 31D2                    	xor dx, dx
   332 00000292 8106[9100]0100          	add word[ponto_pc], 1
   333 00000298 A1[9100]                	mov ax, word[ponto_pc]
   334 0000029B 50                      	push ax
   335 0000029C B90A00                  	mov cx, 10
   336 0000029F 51                      	push cx
   337 000002A0 F7F1                    	div cx
   338 000002A2 80C230                  	add dl, '0'
   339 000002A5 8816[9600]              	mov byte[pnt_pc_str + 1], dl
   340 000002A9 0430                    	add al, '0'
   341 000002AB A2[9500]                	mov byte[pnt_pc_str], al
   342 000002AE 59                      	pop cx
   343 000002AF 58                      	pop ax
   344                                  set_ponto_comp:
   345 000002B0 B90200                  	mov     	cx,2			;n�mero de caracteres
   346 000002B3 BB0000                      mov     	bx,0
   347 000002B6 B601                        mov     	dh,1			;linha 0-29
   348 000002B8 B21E                        mov     	dl,30			;coluna 0-79
   349 000002BA C606[0000]0F            	mov		byte[cor],branco_intenso
   350                                  print_comp:
   351 000002BF E88200                  		call	cursor
   352 000002C2 8A87[9500]                  	mov     al,[bx+pnt_pc_str]
   353 000002C6 E89200                  		call	caracter
   354 000002C9 43                          	inc     bx			;proximo caracter
   355 000002CA FEC2                    		inc		dl			;avanca a coluna
   356 000002CC E2F1                        	loop    print_comp
   357 000002CE C3                      	ret
   358                                  
   359                                  set_caracter1:
   360 000002CF B93A00                      mov     	cx,58			;n�mero de caracteres
   361 000002D2 BB0000                      mov     	bx,0
   362 000002D5 B600                        mov     	dh,0			;linha 0-29
   363 000002D7 B200                        mov     	dl,0			;coluna 0-79
   364 000002D9 C606[0000]0F            	mov		byte[cor],branco_intenso
   365                                  l4:
   366 000002DE E86300                  		call	cursor
   367 000002E1 8A87[0A00]                  	mov     al,[bx+mens1]
   368 000002E5 E87300                  		call	caracter
   369 000002E8 43                          	inc     bx			;proximo caracter
   370 000002E9 FEC2                    		inc		dl			;avanca a coluna
   371 000002EB E2F1                        	loop    l4
   372                                  set_caracter2:
   373 000002ED B93E00                  	mov     	cx,62			;n�mero de caracteres
   374 000002F0 BB0000                      mov     	bx,0
   375 000002F3 B601                        mov     	dh,1			;linha 0-29
   376 000002F5 B200                        mov     	dl,0			;coluna 0-79
   377 000002F7 C606[0000]0F            	mov		byte[cor],branco_intenso
   378                                  write_name:
   379 000002FC E84500                  		call	cursor
   380 000002FF 8A87[4400]                  	mov     al,[bx+mens2]
   381 00000303 E85500                  		call	caracter
   382 00000306 43                          	inc     bx			;proximo caracter
   383 00000307 FEC2                    		inc		dl			;avanca a coluna
   384 00000309 E2F1                        	loop    write_name
   385                                  
   386 0000030B E91CFD                  jmp desenha_cabecalho
   387                                  
   388                                  altera_v_printa:
   389 0000030E B80000                  	mov ax, 0
   390 00000311 A0[8800]                	mov al, byte[v_printa_int]
   391 00000314 0430                    	add al, 30h
   392 00000316 A2[8900]                	mov byte[v_printa_str], al
   393                                  
   394 00000319 B90100                  	mov     	cx,1			;n�mero de caracteres
   395 0000031C BB0000                      mov     	bx,0
   396 0000031F B601                        mov     	dh,1			;linha 0-29
   397 00000321 B23A                        mov     	dl,58			;coluna 0-79
   398 00000323 C606[0000]0F            	mov		byte[cor],branco_intenso
   399                                  print_v:
   400 00000328 E81900                  		call	cursor
   401 0000032B 8A87[8900]                  	mov     al,[bx+v_printa_str]
   402 0000032F E82900                  		call	caracter
   403 00000332 43                          	inc     bx			;proximo caracter
   404 00000333 FEC2                    		inc		dl			;avanca a coluna
   405 00000335 E2F1                        	loop    print_v
   406 00000337 C3                      	ret
   407                                  encerra:
   408 00000338 B400                    	mov  	ah,0   			; set video mode
   409 0000033A A0[0100]                	mov  	al,[modo_anterior]   	; modo anterior
   410 0000033D CD10                    	int  	10h
   411 0000033F B8004C                  	mov 	ax, 4c00h
   412 00000342 CD21                    	int 	21h
   413                                  ;***************************************************************************
   414                                  ;
   415                                  ;   fun��o cursor
   416                                  ;
   417                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   418                                  cursor:
   419 00000344 9C                      		pushf
   420 00000345 50                      		push 		ax
   421 00000346 53                      		push 		bx
   422 00000347 51                      		push		cx
   423 00000348 52                      		push		dx
   424 00000349 56                      		push		si
   425 0000034A 57                      		push		di
   426 0000034B 55                      		push		bp
   427 0000034C B402                    		mov     	ah,2
   428 0000034E B700                    		mov     	bh,0
   429 00000350 CD10                    		int     	10h
   430 00000352 5D                      		pop		bp
   431 00000353 5F                      		pop		di
   432 00000354 5E                      		pop		si
   433 00000355 5A                      		pop		dx
   434 00000356 59                      		pop		cx
   435 00000357 5B                      		pop		bx
   436 00000358 58                      		pop		ax
   437 00000359 9D                      		popf
   438 0000035A C3                      		ret
   439                                  ;_____________________________________________________________________________
   440                                  ;
   441                                  ;   fun��o caracter escrito na posi��o do cursor
   442                                  ;
   443                                  ; al= caracter a ser escrito
   444                                  ; cor definida na variavel cor
   445                                  caracter:
   446 0000035B 9C                      		pushf
   447 0000035C 50                      		push 		ax
   448 0000035D 53                      		push 		bx
   449 0000035E 51                      		push		cx
   450 0000035F 52                      		push		dx
   451 00000360 56                      		push		si
   452 00000361 57                      		push		di
   453 00000362 55                      		push		bp
   454 00000363 B409                        		mov     	ah,9
   455 00000365 B700                        		mov     	bh,0
   456 00000367 B90100                      		mov     	cx,1
   457 0000036A 8A1E[0000]                 		mov     	bl,[cor]
   458 0000036E CD10                        		int     	10h
   459 00000370 5D                      		pop		bp
   460 00000371 5F                      		pop		di
   461 00000372 5E                      		pop		si
   462 00000373 5A                      		pop		dx
   463 00000374 59                      		pop		cx
   464 00000375 5B                      		pop		bx
   465 00000376 58                      		pop		ax
   466 00000377 9D                      		popf
   467 00000378 C3                      		ret
   468                                  ;_____________________________________________________________________________
   469                                  ;
   470                                  ;   fun��o plot_xy
   471                                  ;
   472                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   473                                  ; cor definida na variavel cor
   474                                  plot_xy:
   475 00000379 55                      		push		bp
   476 0000037A 89E5                    		mov		bp,sp
   477 0000037C 9C                      		pushf
   478 0000037D 50                      		push 		ax
   479 0000037E 53                      		push 		bx
   480 0000037F 51                      		push		cx
   481 00000380 52                      		push		dx
   482 00000381 56                      		push		si
   483 00000382 57                      		push		di
   484 00000383 B40C                    	    mov     	ah,0ch
   485 00000385 A0[0000]                	    mov     	al,[cor]
   486 00000388 B700                    	    mov     	bh,0
   487 0000038A BADF01                  	    mov     	dx,479
   488 0000038D 2B5604                  		sub		dx,[bp+4]
   489 00000390 8B4E06                  	    mov     	cx,[bp+6]
   490 00000393 CD10                    	    int     	10h
   491 00000395 5F                      		pop		di
   492 00000396 5E                      		pop		si
   493 00000397 5A                      		pop		dx
   494 00000398 59                      		pop		cx
   495 00000399 5B                      		pop		bx
   496 0000039A 58                      		pop		ax
   497 0000039B 9D                      		popf
   498 0000039C 5D                      		pop		bp
   499 0000039D C20400                  		ret		4
   500                                  ;_____________________________________________________________________________
   501                                  ;    fun��o circle
   502                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   503                                  ; cor definida na variavel cor
   504                                  circle:
   505 000003A0 55                      	push 	bp
   506 000003A1 89E5                    	mov	 	bp,sp
   507 000003A3 9C                      	pushf                        ;coloca os flags na pilha
   508 000003A4 50                      	push 	ax
   509 000003A5 53                      	push 	bx
   510 000003A6 51                      	push	cx
   511 000003A7 52                      	push	dx
   512 000003A8 56                      	push	si
   513 000003A9 57                      	push	di
   514                                  	
   515 000003AA 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   516 000003AD 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   517 000003B0 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   518                                  	
   519 000003B3 89DA                    	mov 	dx,bx	
   520 000003B5 01CA                    	add		dx,cx       ;ponto extremo superior
   521 000003B7 50                      	push    ax			
   522 000003B8 52                      	push	dx
   523 000003B9 E8BDFF                  	call plot_xy
   524                                  	
   525 000003BC 89DA                    	mov		dx,bx
   526 000003BE 29CA                    	sub		dx,cx       ;ponto extremo inferior
   527 000003C0 50                      	push    ax			
   528 000003C1 52                      	push	dx
   529 000003C2 E8B4FF                  	call plot_xy
   530                                  	
   531 000003C5 89C2                    	mov 	dx,ax	
   532 000003C7 01CA                    	add		dx,cx       ;ponto extremo direita
   533 000003C9 52                      	push    dx			
   534 000003CA 53                      	push	bx
   535 000003CB E8ABFF                  	call plot_xy
   536                                  	
   537 000003CE 89C2                    	mov		dx,ax
   538 000003D0 29CA                    	sub		dx,cx       ;ponto extremo esquerda
   539 000003D2 52                      	push    dx			
   540 000003D3 53                      	push	bx
   541 000003D4 E8A2FF                  	call plot_xy
   542                                  		
   543 000003D7 89CF                    	mov		di,cx
   544 000003D9 81EF0100                	sub		di,1	 ;di=r-1
   545 000003DD BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   546                                  	
   547                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   548                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   549                                  ;valores positivos para d
   550                                  
   551                                  stay:				;loop
   552 000003E0 89FE                    	mov		si,di
   553 000003E2 81FE0000                	cmp		si,0
   554 000003E6 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   555 000003E8 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   556 000003EA D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   557 000003EC 81C60300                	add		si,3
   558 000003F0 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   559 000003F2 42                      	inc		dx		;incrementa dx
   560 000003F3 E90E00                  	jmp		plotar
   561                                  inf:	
   562 000003F6 89D6                    	mov		si,dx
   563 000003F8 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   564 000003FA D1E6                    	sal		si,1
   565 000003FC 81C60500                	add		si,5
   566 00000400 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   567 00000402 42                      	inc		dx		;incrementa x (dx)
   568 00000403 49                      	dec		cx		;decrementa y (cx)
   569                                  	
   570                                  plotar:	
   571 00000404 89D6                    	mov		si,dx
   572 00000406 01C6                    	add		si,ax
   573 00000408 56                      	push    si			;coloca a abcisa x+xc na pilha
   574 00000409 89CE                    	mov		si,cx
   575 0000040B 01DE                    	add		si,bx
   576 0000040D 56                      	push    si			;coloca a ordenada y+yc na pilha
   577 0000040E E868FF                  	call plot_xy		;toma conta do segundo octante
   578 00000411 89C6                    	mov		si,ax
   579 00000413 01D6                    	add		si,dx
   580 00000415 56                      	push    si			;coloca a abcisa xc+x na pilha
   581 00000416 89DE                    	mov		si,bx
   582 00000418 29CE                    	sub		si,cx
   583 0000041A 56                      	push    si			;coloca a ordenada yc-y na pilha
   584 0000041B E85BFF                  	call plot_xy		;toma conta do s�timo octante
   585 0000041E 89C6                    	mov		si,ax
   586 00000420 01CE                    	add		si,cx
   587 00000422 56                      	push    si			;coloca a abcisa xc+y na pilha
   588 00000423 89DE                    	mov		si,bx
   589 00000425 01D6                    	add		si,dx
   590 00000427 56                      	push    si			;coloca a ordenada yc+x na pilha
   591 00000428 E84EFF                  	call plot_xy		;toma conta do segundo octante
   592 0000042B 89C6                    	mov		si,ax
   593 0000042D 01CE                    	add		si,cx
   594 0000042F 56                      	push    si			;coloca a abcisa xc+y na pilha
   595 00000430 89DE                    	mov		si,bx
   596 00000432 29D6                    	sub		si,dx
   597 00000434 56                      	push    si			;coloca a ordenada yc-x na pilha
   598 00000435 E841FF                  	call plot_xy		;toma conta do oitavo octante
   599 00000438 89C6                    	mov		si,ax
   600 0000043A 29D6                    	sub		si,dx
   601 0000043C 56                      	push    si			;coloca a abcisa xc-x na pilha
   602 0000043D 89DE                    	mov		si,bx
   603 0000043F 01CE                    	add		si,cx
   604 00000441 56                      	push    si			;coloca a ordenada yc+y na pilha
   605 00000442 E834FF                  	call plot_xy		;toma conta do terceiro octante
   606 00000445 89C6                    	mov		si,ax
   607 00000447 29D6                    	sub		si,dx
   608 00000449 56                      	push    si			;coloca a abcisa xc-x na pilha
   609 0000044A 89DE                    	mov		si,bx
   610 0000044C 29CE                    	sub		si,cx
   611 0000044E 56                      	push    si			;coloca a ordenada yc-y na pilha
   612 0000044F E827FF                  	call plot_xy		;toma conta do sexto octante
   613 00000452 89C6                    	mov		si,ax
   614 00000454 29CE                    	sub		si,cx
   615 00000456 56                      	push    si			;coloca a abcisa xc-y na pilha
   616 00000457 89DE                    	mov		si,bx
   617 00000459 29D6                    	sub		si,dx
   618 0000045B 56                      	push    si			;coloca a ordenada yc-x na pilha
   619 0000045C E81AFF                  	call plot_xy		;toma conta do quinto octante
   620 0000045F 89C6                    	mov		si,ax
   621 00000461 29CE                    	sub		si,cx
   622 00000463 56                      	push    si			;coloca a abcisa xc-y na pilha
   623 00000464 89DE                    	mov		si,bx
   624 00000466 01D6                    	add		si,dx
   625 00000468 56                      	push    si			;coloca a ordenada yc-x na pilha
   626 00000469 E80DFF                  	call plot_xy		;toma conta do quarto octante
   627                                  	
   628 0000046C 39D1                    	cmp		cx,dx
   629 0000046E 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   630 00000470 E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   631                                  	
   632                                  	
   633                                  fim_circle:
   634 00000473 5F                      	pop		di
   635 00000474 5E                      	pop		si
   636 00000475 5A                      	pop		dx
   637 00000476 59                      	pop		cx
   638 00000477 5B                      	pop		bx
   639 00000478 58                      	pop		ax
   640 00000479 9D                      	popf
   641 0000047A 5D                      	pop		bp
   642 0000047B C20600                  	ret		6
   643                                  ;-----------------------------------------------------------------------------
   644                                  ;    fun��o full_circle
   645                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   646                                  ; cor definida na variavel cor					  
   647                                  full_circle:
   648 0000047E 55                      	push 	bp
   649 0000047F 89E5                    	mov	 	bp,sp
   650 00000481 9C                      	pushf                        ;coloca os flags na pilha
   651 00000482 50                      	push 	ax
   652 00000483 53                      	push 	bx
   653 00000484 51                      	push	cx
   654 00000485 52                      	push	dx
   655 00000486 56                      	push	si
   656 00000487 57                      	push	di
   657                                  
   658 00000488 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   659 0000048B 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   660 0000048E 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   661                                  	
   662 00000491 89DE                    	mov		si,bx
   663 00000493 29CE                    	sub		si,cx
   664 00000495 50                      	push    ax			;coloca xc na pilha			
   665 00000496 56                      	push	si			;coloca yc-r na pilha
   666 00000497 89DE                    	mov		si,bx
   667 00000499 01CE                    	add		si,cx
   668 0000049B 50                      	push	ax		;coloca xc na pilha
   669 0000049C 56                      	push	si		;coloca yc+r na pilha
   670 0000049D E89B00                  	call line
   671                                  	
   672                                  		
   673 000004A0 89CF                    	mov		di,cx
   674 000004A2 81EF0100                	sub		di,1	 ;di=r-1
   675 000004A6 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   676                                  	
   677                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   678                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   679                                  ;valores positivos para d
   680                                  
   681                                  stay_full:				;loop
   682 000004A9 89FE                    	mov		si,di
   683 000004AB 81FE0000                	cmp		si,0
   684 000004AF 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   685 000004B1 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   686 000004B3 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   687 000004B5 81C60300                	add		si,3
   688 000004B9 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   689 000004BB 42                      	inc		dx		;incrementa dx
   690 000004BC E90E00                  	jmp		plotar_full
   691                                  inf_full:	
   692 000004BF 89D6                    	mov		si,dx
   693 000004C1 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   694 000004C3 D1E6                    	sal		si,1
   695 000004C5 81C60500                	add		si,5
   696 000004C9 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   697 000004CB 42                      	inc		dx		;incrementa x (dx)
   698 000004CC 49                      	dec		cx		;decrementa y (cx)
   699                                  	
   700                                  plotar_full:	
   701 000004CD 89C6                    	mov		si,ax
   702 000004CF 01CE                    	add		si,cx
   703 000004D1 56                      	push	si		;coloca a abcisa y+xc na pilha			
   704 000004D2 89DE                    	mov		si,bx
   705 000004D4 29D6                    	sub		si,dx
   706 000004D6 56                      	push    si		;coloca a ordenada yc-x na pilha
   707 000004D7 89C6                    	mov		si,ax
   708 000004D9 01CE                    	add		si,cx
   709 000004DB 56                      	push	si		;coloca a abcisa y+xc na pilha	
   710 000004DC 89DE                    	mov		si,bx
   711 000004DE 01D6                    	add		si,dx
   712 000004E0 56                      	push    si		;coloca a ordenada yc+x na pilha	
   713 000004E1 E85700                  	call 	line
   714                                  	
   715 000004E4 89C6                    	mov		si,ax
   716 000004E6 01D6                    	add		si,dx
   717 000004E8 56                      	push	si		;coloca a abcisa xc+x na pilha			
   718 000004E9 89DE                    	mov		si,bx
   719 000004EB 29CE                    	sub		si,cx
   720 000004ED 56                      	push    si		;coloca a ordenada yc-y na pilha
   721 000004EE 89C6                    	mov		si,ax
   722 000004F0 01D6                    	add		si,dx
   723 000004F2 56                      	push	si		;coloca a abcisa xc+x na pilha	
   724 000004F3 89DE                    	mov		si,bx
   725 000004F5 01CE                    	add		si,cx
   726 000004F7 56                      	push    si		;coloca a ordenada yc+y na pilha	
   727 000004F8 E84000                  	call	line
   728                                  	
   729 000004FB 89C6                    	mov		si,ax
   730 000004FD 29D6                    	sub		si,dx
   731 000004FF 56                      	push	si		;coloca a abcisa xc-x na pilha			
   732 00000500 89DE                    	mov		si,bx
   733 00000502 29CE                    	sub		si,cx
   734 00000504 56                      	push    si		;coloca a ordenada yc-y na pilha
   735 00000505 89C6                    	mov		si,ax
   736 00000507 29D6                    	sub		si,dx
   737 00000509 56                      	push	si		;coloca a abcisa xc-x na pilha	
   738 0000050A 89DE                    	mov		si,bx
   739 0000050C 01CE                    	add		si,cx
   740 0000050E 56                      	push    si		;coloca a ordenada yc+y na pilha	
   741 0000050F E82900                  	call	line
   742                                  	
   743 00000512 89C6                    	mov		si,ax
   744 00000514 29CE                    	sub		si,cx
   745 00000516 56                      	push	si		;coloca a abcisa xc-y na pilha			
   746 00000517 89DE                    	mov		si,bx
   747 00000519 29D6                    	sub		si,dx
   748 0000051B 56                      	push    si		;coloca a ordenada yc-x na pilha
   749 0000051C 89C6                    	mov		si,ax
   750 0000051E 29CE                    	sub		si,cx
   751 00000520 56                      	push	si		;coloca a abcisa xc-y na pilha	
   752 00000521 89DE                    	mov		si,bx
   753 00000523 01D6                    	add		si,dx
   754 00000525 56                      	push    si		;coloca a ordenada yc+x na pilha	
   755 00000526 E81200                  	call	line
   756                                  	
   757 00000529 39D1                    	cmp		cx,dx
   758 0000052B 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   759 0000052D E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   760                                  	
   761                                  	
   762                                  fim_full_circle:
   763 00000530 5F                      	pop		di
   764 00000531 5E                      	pop		si
   765 00000532 5A                      	pop		dx
   766 00000533 59                      	pop		cx
   767 00000534 5B                      	pop		bx
   768 00000535 58                      	pop		ax
   769 00000536 9D                      	popf
   770 00000537 5D                      	pop		bp
   771 00000538 C20600                  	ret		6
   772                                  ;-----------------------------------------------------------------------------
   773                                  ;
   774                                  ;   fun��o line
   775                                  ;
   776                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   777                                  line:
   778 0000053B 55                      		push		bp
   779 0000053C 89E5                    		mov		bp,sp
   780 0000053E 9C                      		pushf                        ;coloca os flags na pilha
   781 0000053F 50                      		push 		ax
   782 00000540 53                      		push 		bx
   783 00000541 51                      		push		cx
   784 00000542 52                      		push		dx
   785 00000543 56                      		push		si
   786 00000544 57                      		push		di
   787 00000545 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   788 00000548 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   789 0000054B 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   790 0000054E 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   791 00000551 39C8                    		cmp		ax,cx
   792 00000553 7408                    		je		line2
   793 00000555 721C                    		jb		line1
   794 00000557 91                      		xchg		ax,cx
   795 00000558 87DA                    		xchg		bx,dx
   796 0000055A E91600                  		jmp		line1
   797                                  line2:		; deltax=0
   798 0000055D 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   799 0000055F 7202                    		jb		line3
   800 00000561 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   801                                  line3:	; dx > bx
   802 00000563 50                      		push		ax
   803 00000564 53                      		push		bx
   804 00000565 E811FE                  		call 		plot_xy
   805 00000568 39D3                    		cmp		bx,dx
   806 0000056A 7503                    		jne		line31
   807 0000056C E9C600                  		jmp		fim_line
   808 0000056F 43                      line31:		inc		bx
   809 00000570 E9F0FF                  		jmp		line3
   810                                  ;deltax <>0
   811                                  line1:
   812                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   813                                  	; cx > ax
   814 00000573 51                      		push		cx
   815 00000574 29C1                    		sub		cx,ax
   816 00000576 890E[0600]              		mov		[deltax],cx
   817 0000057A 59                      		pop		cx
   818 0000057B 52                      		push		dx
   819 0000057C 29DA                    		sub		dx,bx
   820 0000057E 7702                    		ja		line32
   821 00000580 F7DA                    		neg		dx
   822                                  line32:		
   823 00000582 8916[0800]              		mov		[deltay],dx
   824 00000586 5A                      		pop		dx
   825                                  
   826 00000587 50                      		push		ax
   827 00000588 A1[0600]                		mov		ax,[deltax]
   828 0000058B 3B06[0800]              		cmp		ax,[deltay]
   829 0000058F 58                      		pop		ax
   830 00000590 724D                    		jb		line5
   831                                  
   832                                  	; cx > ax e deltax>deltay
   833 00000592 51                      		push		cx
   834 00000593 29C1                    		sub		cx,ax
   835 00000595 890E[0600]              		mov		[deltax],cx
   836 00000599 59                      		pop		cx
   837 0000059A 52                      		push		dx
   838 0000059B 29DA                    		sub		dx,bx
   839 0000059D 8916[0800]              		mov		[deltay],dx
   840 000005A1 5A                      		pop		dx
   841                                  
   842 000005A2 89C6                    		mov		si,ax
   843                                  line4:
   844 000005A4 50                      		push		ax
   845 000005A5 52                      		push		dx
   846 000005A6 56                      		push		si
   847 000005A7 29C6                    		sub		si,ax	;(x-x1)
   848 000005A9 A1[0800]                		mov		ax,[deltay]
   849 000005AC F7EE                    		imul		si
   850 000005AE 8B36[0600]              		mov		si,[deltax]		;arredondar
   851 000005B2 D1EE                    		shr		si,1
   852                                  ; se numerador (DX)>0 soma se <0 subtrai
   853 000005B4 81FA0000                		cmp		dx,0
   854 000005B8 7C09                    		jl		ar1
   855 000005BA 01F0                    		add		ax,si
   856 000005BC 81D20000                		adc		dx,0
   857 000005C0 E90600                  		jmp		arc1
   858 000005C3 29F0                    ar1:		sub		ax,si
   859 000005C5 81DA0000                		sbb		dx,0
   860                                  arc1:
   861 000005C9 F73E[0600]              		idiv		word [deltax]
   862 000005CD 01D8                    		add		ax,bx
   863 000005CF 5E                      		pop		si
   864 000005D0 56                      		push		si
   865 000005D1 50                      		push		ax
   866 000005D2 E8A4FD                  		call		plot_xy
   867 000005D5 5A                      		pop		dx
   868 000005D6 58                      		pop		ax
   869 000005D7 39CE                    		cmp		si,cx
   870 000005D9 745A                    		je		fim_line
   871 000005DB 46                      		inc		si
   872 000005DC E9C5FF                  		jmp		line4
   873                                  
   874 000005DF 39D3                    line5:		cmp		bx,dx
   875 000005E1 7203                    		jb 		line7
   876 000005E3 91                      		xchg		ax,cx
   877 000005E4 87DA                    		xchg		bx,dx
   878                                  line7:
   879 000005E6 51                      		push		cx
   880 000005E7 29C1                    		sub		cx,ax
   881 000005E9 890E[0600]              		mov		[deltax],cx
   882 000005ED 59                      		pop		cx
   883 000005EE 52                      		push		dx
   884 000005EF 29DA                    		sub		dx,bx
   885 000005F1 8916[0800]              		mov		[deltay],dx
   886 000005F5 5A                      		pop		dx
   887                                  
   888                                  
   889                                  
   890 000005F6 89DE                    		mov		si,bx
   891                                  line6:
   892 000005F8 52                      		push		dx
   893 000005F9 56                      		push		si
   894 000005FA 50                      		push		ax
   895 000005FB 29DE                    		sub		si,bx	;(y-y1)
   896 000005FD A1[0600]                		mov		ax,[deltax]
   897 00000600 F7EE                    		imul		si
   898 00000602 8B36[0800]              		mov		si,[deltay]		;arredondar
   899 00000606 D1EE                    		shr		si,1
   900                                  ; se numerador (DX)>0 soma se <0 subtrai
   901 00000608 81FA0000                		cmp		dx,0
   902 0000060C 7C09                    		jl		ar2
   903 0000060E 01F0                    		add		ax,si
   904 00000610 81D20000                		adc		dx,0
   905 00000614 E90600                  		jmp		arc2
   906 00000617 29F0                    ar2:		sub		ax,si
   907 00000619 81DA0000                		sbb		dx,0
   908                                  arc2:
   909 0000061D F73E[0800]              		idiv		word [deltay]
   910 00000621 89C7                    		mov		di,ax
   911 00000623 58                      		pop		ax
   912 00000624 01C7                    		add		di,ax
   913 00000626 5E                      		pop		si
   914 00000627 57                      		push		di
   915 00000628 56                      		push		si
   916 00000629 E84DFD                  		call		plot_xy
   917 0000062C 5A                      		pop		dx
   918 0000062D 39D6                    		cmp		si,dx
   919 0000062F 7404                    		je		fim_line
   920 00000631 46                      		inc		si
   921 00000632 E9C3FF                  		jmp		line6
   922                                  
   923                                  fim_line:
   924 00000635 5F                      		pop		di
   925 00000636 5E                      		pop		si
   926 00000637 5A                      		pop		dx
   927 00000638 59                      		pop		cx
   928 00000639 5B                      		pop		bx
   929 0000063A 58                      		pop		ax
   930 0000063B 9D                      		popf
   931 0000063C 5D                      		pop		bp
   932 0000063D C20800                  		ret		8
   933                                  
   934                                  ;*******************************************************************
   935                                  segment data
   936                                  
   937 00000000 0F                      cor		db		branco_intenso
   938                                  
   939                                  ;	I R G B COR
   940                                  ;	0 0 0 0 preto
   941                                  ;	0 0 0 1 azul
   942                                  ;	0 0 1 0 verde
   943                                  ;	0 0 1 1 cyan
   944                                  ;	0 1 0 0 vermelho
   945                                  ;	0 1 0 1 magenta
   946                                  ;	0 1 1 0 marrom
   947                                  ;	0 1 1 1 branco
   948                                  ;	1 0 0 0 cinza
   949                                  ;	1 0 0 1 azul claro
   950                                  ;	1 0 1 0 verde claro
   951                                  ;	1 0 1 1 cyan claro
   952                                  ;	1 1 0 0 rosa
   953                                  ;	1 1 0 1 magenta claro
   954                                  ;	1 1 1 0 amarelo
   955                                  ;	1 1 1 1 branco intenso
   956                                  
   957                                  preto		equ		0
   958                                  azul		equ		1
   959                                  verde		equ		2
   960                                  cyan		equ		3
   961                                  vermelho	equ		4
   962                                  magenta		equ		5
   963                                  marrom		equ		6
   964                                  branco		equ		7
   965                                  cinza		equ		8
   966                                  azul_claro	equ		9
   967                                  verde_claro	equ		10
   968                                  cyan_claro	equ		11
   969                                  rosa		equ		12
   970                                  magenta_claro	equ		13
   971                                  amarelo		equ		14
   972                                  branco_intenso	equ		15
   973                                  
   974 00000001 00                      modo_anterior	db		0
   975 00000002 0000                    linha   	dw  		0
   976 00000004 0000                    coluna  	dw  		0
   977 00000006 0000                    deltax		dw		0
   978 00000008 0000                    deltay		dw		0	
   979 0000000A 45786572636963696F-     mens1    	db  'Exercicio de Programacao de Sistemas Embarcados 1 - 2023/2'
   980 00000013 2064652050726F6772-
   981 0000001C 616D6163616F206465-
   982 00000025 2053697374656D6173-
   983 0000002E 20456D626172636164-
   984 00000037 6F732031202D203230-
   985 00000040 32332F32           
   986 00000044 417274687572204261-     mens2		db	'Arthur Bandeira Salvador 00 X 00 Computador   Velocidade (1/3)'
   987 0000004D 6E6465697261205361-
   988 00000056 6C7661646F72203030-
   989 0000005F 205820303020436F6D-
   990 00000068 70757461646F722020-
   991 00000071 2056656C6F63696461-
   992 0000007A 64652028312F3329   
   993                                  
   994 00000082 0400                    vx			dw	4
   995 00000084 0400                    vy			dw	4
   996 00000086 0400                    vatual 		dw	4
   997 00000088 01                      v_printa_int	db	1
   998 00000089 3124                    v_printa_str	db	'1', '$'
   999 0000008B D600                    raqi		dw	214
  1000 0000008D FE00                    raqf		dw	254
  1001                                  
  1002 0000008F 0000                    ponto_play	dw	0
  1003 00000091 0000                    ponto_pc	dw	0
  1004                                  
  1005 00000093 3030                    pnt_play_str	db	'00'
  1006 00000095 3030                    pnt_pc_str		db	'00'
  1007                                  ;*************************************************************************
  1008                                  segment stack stack
  1009 00000000 <res 00000200>              		resb 		512
  1010                                  stacktop:
  1011                                  
