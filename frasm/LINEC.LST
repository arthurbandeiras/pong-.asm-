     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                    		mov 		ax,data
     8 00000003 8ED8                        		mov 		ds,ax
     9 00000005 B8[0000]                    		mov 		ax,stack
    10 00000008 8ED0                        		mov 		ss,ax
    11 0000000A BC[0002]                    		mov 		sp,stacktop
    12                                  
    13                                  
    14                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    15 0000000D B40F                                mov  		ah,0Fh
    16 0000000F CD10                        		int  		10h
    17 00000011 A2[0100]                    		mov  		[modo_anterior],al   
    18                                  
    19                                  
    20                                  ; alterar modo de video para gr�fico 640x480 16 cores
    21 00000014 B012                        	mov     	al,12h
    22 00000016 B400                       		mov     	ah,0
    23 00000018 CD10                        	int     	10h
    24                                  
    25                                  
    26                                  
    27                                  ;***************************************************;
    28                                  ;			   definições pré código				;
    29                                  ;***************************************************;
    30                                  
    31                                  ;limpa si, di, e define onde a bolinha começa
    32 0000001A 31F6                    		xor si, si
    33 0000001C 31FF                    		xor di, di
    34 0000001E BE3F01                  		mov si, 319
    35 00000021 BFF000                  		mov di, 240
    36                                  ;define a quantidade de loops completos (tempo de jogo
    37 00000024 B950C3                  		mov cx, 50000
    38                                  main:
    39                                  	;circulos vermelhos
    40 00000027 C606[0000]04            	mov     byte[cor],vermelho  
    41 0000002C 89F0                    	mov     ax, si
    42 0000002E 50                      	push        ax
    43 0000002F 89F8                    	mov     ax, di
    44 00000031 50                      	push        ax
    45 00000032 B80A00                  	mov     ax,10
    46 00000035 50                      	push        ax
    47 00000036 E84C02                  	call full_circle
    48 00000039 E80B04                  	call delay
    49 0000003C 58                      	pop ax
    50 0000003D 58                      	pop ax
    51 0000003E 58                      	pop ax
    52                                  
    53                                  	;apaga circulos (circulos pretos)
    54 0000003F C606[0000]00            	mov     byte[cor],preto
    55 00000044 89F0                    	mov     ax, si
    56 00000046 50                      	push        ax
    57 00000047 89F8                    	mov     ax, di
    58 00000049 50                      	push        ax
    59 0000004A B80A00                  	mov     ax,10
    60 0000004D 50                      	push        ax
    61 0000004E E83402                  	call full_circle
    62 00000051 58                      	pop ax
    63 00000052 58                      	pop ax
    64 00000053 58                      	pop ax
    65                                  			
    66                                  
    67 00000054 0336[4600]              	add si, word[vx]
    68 00000058 033E[4800]              	add di, word[vy]
    69 0000005C 81FE0A00                	cmp si, 10
    70 00000060 7E1A                    	jle	bate_esquerda
    71 00000062 81FE7302                	cmp si, 627
    72 00000066 7D1D                    	jge bate_direita 
    73 00000068 81FFA301                	cmp di, 419
    74 0000006C 7D20                    	jge bate_cima
    75 0000006E 81FF0A00                	cmp di, 10
    76 00000072 7E23                    	jle bate_baixo 
    77 00000074 E8B300                  	call set_caracter
    78 00000077 E82600                  	call desenha_bordas
    79 0000007A E2AB                    loop main
    80                                  
    81                                  bate_esquerda:
    82 0000007C C706[4600]0A00          	mov word[vx], 10
    83 00000082 E9A2FF                  jmp main
    84                                  
    85                                  bate_direita:
    86 00000085 C706[4600]F6FF          	mov word[vx], -10    
    87 0000008B E999FF                  jmp main
    88                                  
    89                                  bate_cima:
    90 0000008E C706[4800]F6FF          	mov word[vy], -10
    91 00000094 E990FF                  jmp main
    92                                  
    93                                  bate_baixo:
    94 00000097 C706[4800]0A00          	mov word[vy], 10    
    95 0000009D E987FF                  jmp main
    96                                  
    97                                  
    98                                  
    99                                  desenha_bordas:
   100                                  	;borda superior (x1, y1, x2, y2)
   101 000000A0 C606[0000]0F            	mov		byte[cor],branco_intenso	
   102 000000A5 B80000                  	mov		ax,0
   103 000000A8 50                      	push		ax
   104 000000A9 B80000                  	mov		ax,0
   105 000000AC 50                      	push		ax
   106 000000AD B87F02                  	mov		ax,639
   107 000000B0 50                      	push		ax
   108 000000B1 B80000                  	mov		ax,0
   109 000000B4 50                      	push		ax
   110 000000B5 E88A02                  	call line
   111 000000B8 58                      	pop ax
   112 000000B9 58                      	pop ax
   113 000000BA 58                      	pop ax
   114                                  	;borda inferior (x1, y1, x2, y2)
   115 000000BB C606[0000]0F            	mov		byte[cor],branco_intenso	
   116 000000C0 B80000                  	mov		ax,0
   117 000000C3 50                      	push		ax
   118 000000C4 B8DF01                  	mov		ax,479
   119 000000C7 50                      	push		ax
   120 000000C8 B87F02                  	mov		ax,639
   121 000000CB 50                      	push		ax
   122 000000CC B8DF01                  	mov		ax,479
   123 000000CF 50                      	push		ax
   124 000000D0 E86F02                  	call line
   125 000000D3 58                      	pop ax
   126 000000D4 58                      	pop ax
   127 000000D5 58                      	pop ax
   128                                  	;borda esquerda (x1, y1, x2, y2)
   129 000000D6 C606[0000]0F            	mov		byte[cor],branco_intenso	
   130 000000DB B80000                  	mov		ax,0
   131 000000DE 50                      	push		ax
   132 000000DF B80000                  	mov		ax,0
   133 000000E2 50                      	push		ax
   134 000000E3 B80000                  	mov		ax,0
   135 000000E6 50                      	push		ax
   136 000000E7 B8DF01                  	mov		ax,479
   137 000000EA 50                      	push		ax
   138 000000EB E85402                  	call line
   139 000000EE 58                      	pop ax
   140 000000EF 58                      	pop ax
   141 000000F0 58                      	pop ax
   142                                  	;borda direita (x1, y1, x2, y2)
   143 000000F1 C606[0000]0F            	mov		byte[cor],branco_intenso	
   144 000000F6 B87F02                  	mov		ax,639
   145 000000F9 50                      	push		ax
   146 000000FA B80000                  	mov		ax,0
   147 000000FD 50                      	push		ax
   148 000000FE B87F02                  	mov		ax,639
   149 00000101 50                      	push		ax
   150 00000102 B8DF01                  	mov		ax,479
   151 00000105 50                      	push		ax
   152 00000106 E83902                  	call line
   153 00000109 58                      	pop ax
   154 0000010A 58                      	pop ax
   155 0000010B 58                      	pop ax
   156                                  
   157                                  desenha_cabeçalho:
   158                                  	;borda cabeçalho (x1, y1, x2, y2)
   159 0000010C C606[0000]0F            	mov		byte[cor],branco_intenso	
   160 00000111 B80000                  	mov		ax,0
   161 00000114 50                      	push		ax
   162 00000115 B8AE01                  	mov		ax,430
   163 00000118 50                      	push		ax
   164 00000119 B88002                  	mov		ax,640
   165 0000011C 50                      	push		ax
   166 0000011D B8AE01                  	mov		ax,430
   167 00000120 50                      	push		ax
   168 00000121 E81E02                  	call line
   169 00000124 58                      	pop ax
   170 00000125 58                      	pop ax
   171 00000126 58                      	pop ax
   172                                  	
   173 00000127 E9FDFE                  jmp main
   174                                  
   175                                  ;escrever uma mensagem
   176                                  set_caracter:
   177 0000012A B93A00                      mov     	cx,58			;n�mero de caracteres
   178 0000012D BB0000                      mov     	bx,0
   179 00000130 B600                        mov     	dh,0			;linha 0-29
   180 00000132 B200                        mov     	dl,0			;coluna 0-79
   181 00000134 C606[0000]0F            	mov		byte[cor],branco_intenso
   182                                  l4:
   183 00000139 E80F00                  		call	cursor
   184 0000013C 8A87[0A00]                  	mov     al,[bx+mens]
   185 00000140 E81F00                  		call	caracter
   186 00000143 43                          	inc     bx			;proximo caracter
   187 00000144 FEC2                    		inc		dl			;avanca a coluna
   188 00000146 E2F1                        	loop    l4
   189 00000148 E955FF                  jmp desenha_bordas
   190                                  		;mov    	ah,08h
   191                                  		;int     21h
   192                                  	    ;mov  	ah,0   			; set video mode
   193                                  	    ;mov  	al,[modo_anterior]   	; modo anterior
   194                                  	    ;int  	10h
   195                                  		;mov 	al,0
   196                                  ;***************************************************************************
   197                                  ;
   198                                  ;   fun��o cursor
   199                                  ;
   200                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   201                                  cursor:
   202 0000014B 9C                      		pushf
   203 0000014C 50                      		push 		ax
   204 0000014D 53                      		push 		bx
   205 0000014E 51                      		push		cx
   206 0000014F 52                      		push		dx
   207 00000150 56                      		push		si
   208 00000151 57                      		push		di
   209 00000152 55                      		push		bp
   210 00000153 B402                    		mov     	ah,2
   211 00000155 B700                    		mov     	bh,0
   212 00000157 CD10                    		int     	10h
   213 00000159 5D                      		pop		bp
   214 0000015A 5F                      		pop		di
   215 0000015B 5E                      		pop		si
   216 0000015C 5A                      		pop		dx
   217 0000015D 59                      		pop		cx
   218 0000015E 5B                      		pop		bx
   219 0000015F 58                      		pop		ax
   220 00000160 9D                      		popf
   221 00000161 C3                      		ret
   222                                  ;_____________________________________________________________________________
   223                                  ;
   224                                  ;   fun��o caracter escrito na posi��o do cursor
   225                                  ;
   226                                  ; al= caracter a ser escrito
   227                                  ; cor definida na variavel cor
   228                                  caracter:
   229 00000162 9C                      		pushf
   230 00000163 50                      		push 		ax
   231 00000164 53                      		push 		bx
   232 00000165 51                      		push		cx
   233 00000166 52                      		push		dx
   234 00000167 56                      		push		si
   235 00000168 57                      		push		di
   236 00000169 55                      		push		bp
   237 0000016A B409                        		mov     	ah,9
   238 0000016C B700                        		mov     	bh,0
   239 0000016E B90100                      		mov     	cx,1
   240 00000171 8A1E[0000]                 		mov     	bl,[cor]
   241 00000175 CD10                        		int     	10h
   242 00000177 5D                      		pop		bp
   243 00000178 5F                      		pop		di
   244 00000179 5E                      		pop		si
   245 0000017A 5A                      		pop		dx
   246 0000017B 59                      		pop		cx
   247 0000017C 5B                      		pop		bx
   248 0000017D 58                      		pop		ax
   249 0000017E 9D                      		popf
   250 0000017F C3                      		ret
   251                                  ;_____________________________________________________________________________
   252                                  ;
   253                                  ;   fun��o plot_xy
   254                                  ;
   255                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   256                                  ; cor definida na variavel cor
   257                                  plot_xy:
   258 00000180 55                      		push		bp
   259 00000181 89E5                    		mov		bp,sp
   260 00000183 9C                      		pushf
   261 00000184 50                      		push 		ax
   262 00000185 53                      		push 		bx
   263 00000186 51                      		push		cx
   264 00000187 52                      		push		dx
   265 00000188 56                      		push		si
   266 00000189 57                      		push		di
   267 0000018A B40C                    	    mov     	ah,0ch
   268 0000018C A0[0000]                	    mov     	al,[cor]
   269 0000018F B700                    	    mov     	bh,0
   270 00000191 BADF01                  	    mov     	dx,479
   271 00000194 2B5604                  		sub		dx,[bp+4]
   272 00000197 8B4E06                  	    mov     	cx,[bp+6]
   273 0000019A CD10                    	    int     	10h
   274 0000019C 5F                      		pop		di
   275 0000019D 5E                      		pop		si
   276 0000019E 5A                      		pop		dx
   277 0000019F 59                      		pop		cx
   278 000001A0 5B                      		pop		bx
   279 000001A1 58                      		pop		ax
   280 000001A2 9D                      		popf
   281 000001A3 5D                      		pop		bp
   282 000001A4 C20400                  		ret		4
   283                                  ;_____________________________________________________________________________
   284                                  ;    fun��o circle
   285                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   286                                  ; cor definida na variavel cor
   287                                  circle:
   288 000001A7 55                      	push 	bp
   289 000001A8 89E5                    	mov	 	bp,sp
   290 000001AA 9C                      	pushf                        ;coloca os flags na pilha
   291 000001AB 50                      	push 	ax
   292 000001AC 53                      	push 	bx
   293 000001AD 51                      	push	cx
   294 000001AE 52                      	push	dx
   295 000001AF 56                      	push	si
   296 000001B0 57                      	push	di
   297                                  	
   298 000001B1 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   299 000001B4 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   300 000001B7 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   301                                  	
   302 000001BA 89DA                    	mov 	dx,bx	
   303 000001BC 01CA                    	add		dx,cx       ;ponto extremo superior
   304 000001BE 50                      	push    ax			
   305 000001BF 52                      	push	dx
   306 000001C0 E8BDFF                  	call plot_xy
   307                                  	
   308 000001C3 89DA                    	mov		dx,bx
   309 000001C5 29CA                    	sub		dx,cx       ;ponto extremo inferior
   310 000001C7 50                      	push    ax			
   311 000001C8 52                      	push	dx
   312 000001C9 E8B4FF                  	call plot_xy
   313                                  	
   314 000001CC 89C2                    	mov 	dx,ax	
   315 000001CE 01CA                    	add		dx,cx       ;ponto extremo direita
   316 000001D0 52                      	push    dx			
   317 000001D1 53                      	push	bx
   318 000001D2 E8ABFF                  	call plot_xy
   319                                  	
   320 000001D5 89C2                    	mov		dx,ax
   321 000001D7 29CA                    	sub		dx,cx       ;ponto extremo esquerda
   322 000001D9 52                      	push    dx			
   323 000001DA 53                      	push	bx
   324 000001DB E8A2FF                  	call plot_xy
   325                                  		
   326 000001DE 89CF                    	mov		di,cx
   327 000001E0 81EF0100                	sub		di,1	 ;di=r-1
   328 000001E4 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   329                                  	
   330                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   331                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   332                                  ;valores positivos para d
   333                                  
   334                                  stay:				;loop
   335 000001E7 89FE                    	mov		si,di
   336 000001E9 81FE0000                	cmp		si,0
   337 000001ED 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   338 000001EF 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   339 000001F1 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   340 000001F3 81C60300                	add		si,3
   341 000001F7 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   342 000001F9 42                      	inc		dx		;incrementa dx
   343 000001FA E90E00                  	jmp		plotar
   344                                  inf:	
   345 000001FD 89D6                    	mov		si,dx
   346 000001FF 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   347 00000201 D1E6                    	sal		si,1
   348 00000203 81C60500                	add		si,5
   349 00000207 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   350 00000209 42                      	inc		dx		;incrementa x (dx)
   351 0000020A 49                      	dec		cx		;decrementa y (cx)
   352                                  	
   353                                  plotar:	
   354 0000020B 89D6                    	mov		si,dx
   355 0000020D 01C6                    	add		si,ax
   356 0000020F 56                      	push    si			;coloca a abcisa x+xc na pilha
   357 00000210 89CE                    	mov		si,cx
   358 00000212 01DE                    	add		si,bx
   359 00000214 56                      	push    si			;coloca a ordenada y+yc na pilha
   360 00000215 E868FF                  	call plot_xy		;toma conta do segundo octante
   361 00000218 89C6                    	mov		si,ax
   362 0000021A 01D6                    	add		si,dx
   363 0000021C 56                      	push    si			;coloca a abcisa xc+x na pilha
   364 0000021D 89DE                    	mov		si,bx
   365 0000021F 29CE                    	sub		si,cx
   366 00000221 56                      	push    si			;coloca a ordenada yc-y na pilha
   367 00000222 E85BFF                  	call plot_xy		;toma conta do s�timo octante
   368 00000225 89C6                    	mov		si,ax
   369 00000227 01CE                    	add		si,cx
   370 00000229 56                      	push    si			;coloca a abcisa xc+y na pilha
   371 0000022A 89DE                    	mov		si,bx
   372 0000022C 01D6                    	add		si,dx
   373 0000022E 56                      	push    si			;coloca a ordenada yc+x na pilha
   374 0000022F E84EFF                  	call plot_xy		;toma conta do segundo octante
   375 00000232 89C6                    	mov		si,ax
   376 00000234 01CE                    	add		si,cx
   377 00000236 56                      	push    si			;coloca a abcisa xc+y na pilha
   378 00000237 89DE                    	mov		si,bx
   379 00000239 29D6                    	sub		si,dx
   380 0000023B 56                      	push    si			;coloca a ordenada yc-x na pilha
   381 0000023C E841FF                  	call plot_xy		;toma conta do oitavo octante
   382 0000023F 89C6                    	mov		si,ax
   383 00000241 29D6                    	sub		si,dx
   384 00000243 56                      	push    si			;coloca a abcisa xc-x na pilha
   385 00000244 89DE                    	mov		si,bx
   386 00000246 01CE                    	add		si,cx
   387 00000248 56                      	push    si			;coloca a ordenada yc+y na pilha
   388 00000249 E834FF                  	call plot_xy		;toma conta do terceiro octante
   389 0000024C 89C6                    	mov		si,ax
   390 0000024E 29D6                    	sub		si,dx
   391 00000250 56                      	push    si			;coloca a abcisa xc-x na pilha
   392 00000251 89DE                    	mov		si,bx
   393 00000253 29CE                    	sub		si,cx
   394 00000255 56                      	push    si			;coloca a ordenada yc-y na pilha
   395 00000256 E827FF                  	call plot_xy		;toma conta do sexto octante
   396 00000259 89C6                    	mov		si,ax
   397 0000025B 29CE                    	sub		si,cx
   398 0000025D 56                      	push    si			;coloca a abcisa xc-y na pilha
   399 0000025E 89DE                    	mov		si,bx
   400 00000260 29D6                    	sub		si,dx
   401 00000262 56                      	push    si			;coloca a ordenada yc-x na pilha
   402 00000263 E81AFF                  	call plot_xy		;toma conta do quinto octante
   403 00000266 89C6                    	mov		si,ax
   404 00000268 29CE                    	sub		si,cx
   405 0000026A 56                      	push    si			;coloca a abcisa xc-y na pilha
   406 0000026B 89DE                    	mov		si,bx
   407 0000026D 01D6                    	add		si,dx
   408 0000026F 56                      	push    si			;coloca a ordenada yc-x na pilha
   409 00000270 E80DFF                  	call plot_xy		;toma conta do quarto octante
   410                                  	
   411 00000273 39D1                    	cmp		cx,dx
   412 00000275 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   413 00000277 E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   414                                  	
   415                                  	
   416                                  fim_circle:
   417 0000027A 5F                      	pop		di
   418 0000027B 5E                      	pop		si
   419 0000027C 5A                      	pop		dx
   420 0000027D 59                      	pop		cx
   421 0000027E 5B                      	pop		bx
   422 0000027F 58                      	pop		ax
   423 00000280 9D                      	popf
   424 00000281 5D                      	pop		bp
   425 00000282 C20600                  	ret		6
   426                                  ;-----------------------------------------------------------------------------
   427                                  ;    fun��o full_circle
   428                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   429                                  ; cor definida na variavel cor					  
   430                                  full_circle:
   431 00000285 55                      	push 	bp
   432 00000286 89E5                    	mov	 	bp,sp
   433 00000288 9C                      	pushf                        ;coloca os flags na pilha
   434 00000289 50                      	push 	ax
   435 0000028A 53                      	push 	bx
   436 0000028B 51                      	push	cx
   437 0000028C 52                      	push	dx
   438 0000028D 56                      	push	si
   439 0000028E 57                      	push	di
   440                                  
   441 0000028F 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   442 00000292 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   443 00000295 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   444                                  	
   445 00000298 89DE                    	mov		si,bx
   446 0000029A 29CE                    	sub		si,cx
   447 0000029C 50                      	push    ax			;coloca xc na pilha			
   448 0000029D 56                      	push	si			;coloca yc-r na pilha
   449 0000029E 89DE                    	mov		si,bx
   450 000002A0 01CE                    	add		si,cx
   451 000002A2 50                      	push	ax		;coloca xc na pilha
   452 000002A3 56                      	push	si		;coloca yc+r na pilha
   453 000002A4 E89B00                  	call line
   454                                  	
   455                                  		
   456 000002A7 89CF                    	mov		di,cx
   457 000002A9 81EF0100                	sub		di,1	 ;di=r-1
   458 000002AD BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   459                                  	
   460                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   461                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   462                                  ;valores positivos para d
   463                                  
   464                                  stay_full:				;loop
   465 000002B0 89FE                    	mov		si,di
   466 000002B2 81FE0000                	cmp		si,0
   467 000002B6 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   468 000002B8 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   469 000002BA D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   470 000002BC 81C60300                	add		si,3
   471 000002C0 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   472 000002C2 42                      	inc		dx		;incrementa dx
   473 000002C3 E90E00                  	jmp		plotar_full
   474                                  inf_full:	
   475 000002C6 89D6                    	mov		si,dx
   476 000002C8 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   477 000002CA D1E6                    	sal		si,1
   478 000002CC 81C60500                	add		si,5
   479 000002D0 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   480 000002D2 42                      	inc		dx		;incrementa x (dx)
   481 000002D3 49                      	dec		cx		;decrementa y (cx)
   482                                  	
   483                                  plotar_full:	
   484 000002D4 89C6                    	mov		si,ax
   485 000002D6 01CE                    	add		si,cx
   486 000002D8 56                      	push	si		;coloca a abcisa y+xc na pilha			
   487 000002D9 89DE                    	mov		si,bx
   488 000002DB 29D6                    	sub		si,dx
   489 000002DD 56                      	push    si		;coloca a ordenada yc-x na pilha
   490 000002DE 89C6                    	mov		si,ax
   491 000002E0 01CE                    	add		si,cx
   492 000002E2 56                      	push	si		;coloca a abcisa y+xc na pilha	
   493 000002E3 89DE                    	mov		si,bx
   494 000002E5 01D6                    	add		si,dx
   495 000002E7 56                      	push    si		;coloca a ordenada yc+x na pilha	
   496 000002E8 E85700                  	call 	line
   497                                  	
   498 000002EB 89C6                    	mov		si,ax
   499 000002ED 01D6                    	add		si,dx
   500 000002EF 56                      	push	si		;coloca a abcisa xc+x na pilha			
   501 000002F0 89DE                    	mov		si,bx
   502 000002F2 29CE                    	sub		si,cx
   503 000002F4 56                      	push    si		;coloca a ordenada yc-y na pilha
   504 000002F5 89C6                    	mov		si,ax
   505 000002F7 01D6                    	add		si,dx
   506 000002F9 56                      	push	si		;coloca a abcisa xc+x na pilha	
   507 000002FA 89DE                    	mov		si,bx
   508 000002FC 01CE                    	add		si,cx
   509 000002FE 56                      	push    si		;coloca a ordenada yc+y na pilha	
   510 000002FF E84000                  	call	line
   511                                  	
   512 00000302 89C6                    	mov		si,ax
   513 00000304 29D6                    	sub		si,dx
   514 00000306 56                      	push	si		;coloca a abcisa xc-x na pilha			
   515 00000307 89DE                    	mov		si,bx
   516 00000309 29CE                    	sub		si,cx
   517 0000030B 56                      	push    si		;coloca a ordenada yc-y na pilha
   518 0000030C 89C6                    	mov		si,ax
   519 0000030E 29D6                    	sub		si,dx
   520 00000310 56                      	push	si		;coloca a abcisa xc-x na pilha	
   521 00000311 89DE                    	mov		si,bx
   522 00000313 01CE                    	add		si,cx
   523 00000315 56                      	push    si		;coloca a ordenada yc+y na pilha	
   524 00000316 E82900                  	call	line
   525                                  	
   526 00000319 89C6                    	mov		si,ax
   527 0000031B 29CE                    	sub		si,cx
   528 0000031D 56                      	push	si		;coloca a abcisa xc-y na pilha			
   529 0000031E 89DE                    	mov		si,bx
   530 00000320 29D6                    	sub		si,dx
   531 00000322 56                      	push    si		;coloca a ordenada yc-x na pilha
   532 00000323 89C6                    	mov		si,ax
   533 00000325 29CE                    	sub		si,cx
   534 00000327 56                      	push	si		;coloca a abcisa xc-y na pilha	
   535 00000328 89DE                    	mov		si,bx
   536 0000032A 01D6                    	add		si,dx
   537 0000032C 56                      	push    si		;coloca a ordenada yc+x na pilha	
   538 0000032D E81200                  	call	line
   539                                  	
   540 00000330 39D1                    	cmp		cx,dx
   541 00000332 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   542 00000334 E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   543                                  	
   544                                  	
   545                                  fim_full_circle:
   546 00000337 5F                      	pop		di
   547 00000338 5E                      	pop		si
   548 00000339 5A                      	pop		dx
   549 0000033A 59                      	pop		cx
   550 0000033B 5B                      	pop		bx
   551 0000033C 58                      	pop		ax
   552 0000033D 9D                      	popf
   553 0000033E 5D                      	pop		bp
   554 0000033F C20600                  	ret		6
   555                                  ;-----------------------------------------------------------------------------
   556                                  ;
   557                                  ;   fun��o line
   558                                  ;
   559                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   560                                  line:
   561 00000342 55                      		push		bp
   562 00000343 89E5                    		mov		bp,sp
   563 00000345 9C                      		pushf                        ;coloca os flags na pilha
   564 00000346 50                      		push 		ax
   565 00000347 53                      		push 		bx
   566 00000348 51                      		push		cx
   567 00000349 52                      		push		dx
   568 0000034A 56                      		push		si
   569 0000034B 57                      		push		di
   570 0000034C 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   571 0000034F 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   572 00000352 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   573 00000355 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   574 00000358 39C8                    		cmp		ax,cx
   575 0000035A 7408                    		je		line2
   576 0000035C 721C                    		jb		line1
   577 0000035E 91                      		xchg		ax,cx
   578 0000035F 87DA                    		xchg		bx,dx
   579 00000361 E91600                  		jmp		line1
   580                                  line2:		; deltax=0
   581 00000364 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   582 00000366 7202                    		jb		line3
   583 00000368 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   584                                  line3:	; dx > bx
   585 0000036A 50                      		push		ax
   586 0000036B 53                      		push		bx
   587 0000036C E811FE                  		call 		plot_xy
   588 0000036F 39D3                    		cmp		bx,dx
   589 00000371 7503                    		jne		line31
   590 00000373 E9C600                  		jmp		fim_line
   591 00000376 43                      line31:		inc		bx
   592 00000377 E9F0FF                  		jmp		line3
   593                                  ;deltax <>0
   594                                  line1:
   595                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   596                                  	; cx > ax
   597 0000037A 51                      		push		cx
   598 0000037B 29C1                    		sub		cx,ax
   599 0000037D 890E[0600]              		mov		[deltax],cx
   600 00000381 59                      		pop		cx
   601 00000382 52                      		push		dx
   602 00000383 29DA                    		sub		dx,bx
   603 00000385 7702                    		ja		line32
   604 00000387 F7DA                    		neg		dx
   605                                  line32:		
   606 00000389 8916[0800]              		mov		[deltay],dx
   607 0000038D 5A                      		pop		dx
   608                                  
   609 0000038E 50                      		push		ax
   610 0000038F A1[0600]                		mov		ax,[deltax]
   611 00000392 3B06[0800]              		cmp		ax,[deltay]
   612 00000396 58                      		pop		ax
   613 00000397 724D                    		jb		line5
   614                                  
   615                                  	; cx > ax e deltax>deltay
   616 00000399 51                      		push		cx
   617 0000039A 29C1                    		sub		cx,ax
   618 0000039C 890E[0600]              		mov		[deltax],cx
   619 000003A0 59                      		pop		cx
   620 000003A1 52                      		push		dx
   621 000003A2 29DA                    		sub		dx,bx
   622 000003A4 8916[0800]              		mov		[deltay],dx
   623 000003A8 5A                      		pop		dx
   624                                  
   625 000003A9 89C6                    		mov		si,ax
   626                                  line4:
   627 000003AB 50                      		push		ax
   628 000003AC 52                      		push		dx
   629 000003AD 56                      		push		si
   630 000003AE 29C6                    		sub		si,ax	;(x-x1)
   631 000003B0 A1[0800]                		mov		ax,[deltay]
   632 000003B3 F7EE                    		imul		si
   633 000003B5 8B36[0600]              		mov		si,[deltax]		;arredondar
   634 000003B9 D1EE                    		shr		si,1
   635                                  ; se numerador (DX)>0 soma se <0 subtrai
   636 000003BB 81FA0000                		cmp		dx,0
   637 000003BF 7C09                    		jl		ar1
   638 000003C1 01F0                    		add		ax,si
   639 000003C3 81D20000                		adc		dx,0
   640 000003C7 E90600                  		jmp		arc1
   641 000003CA 29F0                    ar1:		sub		ax,si
   642 000003CC 81DA0000                		sbb		dx,0
   643                                  arc1:
   644 000003D0 F73E[0600]              		idiv		word [deltax]
   645 000003D4 01D8                    		add		ax,bx
   646 000003D6 5E                      		pop		si
   647 000003D7 56                      		push		si
   648 000003D8 50                      		push		ax
   649 000003D9 E8A4FD                  		call		plot_xy
   650 000003DC 5A                      		pop		dx
   651 000003DD 58                      		pop		ax
   652 000003DE 39CE                    		cmp		si,cx
   653 000003E0 745A                    		je		fim_line
   654 000003E2 46                      		inc		si
   655 000003E3 E9C5FF                  		jmp		line4
   656                                  
   657 000003E6 39D3                    line5:		cmp		bx,dx
   658 000003E8 7203                    		jb 		line7
   659 000003EA 91                      		xchg		ax,cx
   660 000003EB 87DA                    		xchg		bx,dx
   661                                  line7:
   662 000003ED 51                      		push		cx
   663 000003EE 29C1                    		sub		cx,ax
   664 000003F0 890E[0600]              		mov		[deltax],cx
   665 000003F4 59                      		pop		cx
   666 000003F5 52                      		push		dx
   667 000003F6 29DA                    		sub		dx,bx
   668 000003F8 8916[0800]              		mov		[deltay],dx
   669 000003FC 5A                      		pop		dx
   670                                  
   671                                  
   672                                  
   673 000003FD 89DE                    		mov		si,bx
   674                                  line6:
   675 000003FF 52                      		push		dx
   676 00000400 56                      		push		si
   677 00000401 50                      		push		ax
   678 00000402 29DE                    		sub		si,bx	;(y-y1)
   679 00000404 A1[0600]                		mov		ax,[deltax]
   680 00000407 F7EE                    		imul		si
   681 00000409 8B36[0800]              		mov		si,[deltay]		;arredondar
   682 0000040D D1EE                    		shr		si,1
   683                                  ; se numerador (DX)>0 soma se <0 subtrai
   684 0000040F 81FA0000                		cmp		dx,0
   685 00000413 7C09                    		jl		ar2
   686 00000415 01F0                    		add		ax,si
   687 00000417 81D20000                		adc		dx,0
   688 0000041B E90600                  		jmp		arc2
   689 0000041E 29F0                    ar2:		sub		ax,si
   690 00000420 81DA0000                		sbb		dx,0
   691                                  arc2:
   692 00000424 F73E[0800]              		idiv		word [deltay]
   693 00000428 89C7                    		mov		di,ax
   694 0000042A 58                      		pop		ax
   695 0000042B 01C7                    		add		di,ax
   696 0000042D 5E                      		pop		si
   697 0000042E 57                      		push		di
   698 0000042F 56                      		push		si
   699 00000430 E84DFD                  		call		plot_xy
   700 00000433 5A                      		pop		dx
   701 00000434 39D6                    		cmp		si,dx
   702 00000436 7404                    		je		fim_line
   703 00000438 46                      		inc		si
   704 00000439 E9C3FF                  		jmp		line6
   705                                  
   706                                  fim_line:
   707 0000043C 5F                      		pop		di
   708 0000043D 5E                      		pop		si
   709 0000043E 5A                      		pop		dx
   710 0000043F 59                      		pop		cx
   711 00000440 5B                      		pop		bx
   712 00000441 58                      		pop		ax
   713 00000442 9D                      		popf
   714 00000443 5D                      		pop		bp
   715 00000444 C20800                  		ret		8
   716                                  
   717                                  
   718                                  
   719                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   720 00000447 51                          push cx
   721 00000448 8B0E[4400]                  mov cx, word [velocidade] ; Carrega “velocidade” em cx (contador para loop)
   722                                  del2:
   723 0000044C 51                          push cx ; Coloca cx na pilha para usa-lo em outro loop
   724 0000044D B90005                      mov cx, 0500h ; Teste modificando este valor
   725                                  del1:
   726 00000450 E2FE                        loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   727 00000452 59                          pop cx ; Recupera cx da pilha
   728 00000453 E2F7                        loop del2 ; No loop del2, cx é decrementado até que seja zero
   729 00000455 59                          pop cx
   730 00000456 C3                          ret
   731                                  
   732                                  ;*******************************************************************
   733                                  segment data
   734                                  
   735 00000000 0F                      cor		db		branco_intenso
   736                                  
   737                                  ;	I R G B COR
   738                                  ;	0 0 0 0 preto
   739                                  ;	0 0 0 1 azul
   740                                  ;	0 0 1 0 verde
   741                                  ;	0 0 1 1 cyan
   742                                  ;	0 1 0 0 vermelho
   743                                  ;	0 1 0 1 magenta
   744                                  ;	0 1 1 0 marrom
   745                                  ;	0 1 1 1 branco
   746                                  ;	1 0 0 0 cinza
   747                                  ;	1 0 0 1 azul claro
   748                                  ;	1 0 1 0 verde claro
   749                                  ;	1 0 1 1 cyan claro
   750                                  ;	1 1 0 0 rosa
   751                                  ;	1 1 0 1 magenta claro
   752                                  ;	1 1 1 0 amarelo
   753                                  ;	1 1 1 1 branco intenso
   754                                  
   755                                  preto		equ		0
   756                                  azul		equ		1
   757                                  verde		equ		2
   758                                  cyan		equ		3
   759                                  vermelho	equ		4
   760                                  magenta		equ		5
   761                                  marrom		equ		6
   762                                  branco		equ		7
   763                                  cinza		equ		8
   764                                  azul_claro	equ		9
   765                                  verde_claro	equ		10
   766                                  cyan_claro	equ		11
   767                                  rosa		equ		12
   768                                  magenta_claro	equ		13
   769                                  amarelo		equ		14
   770                                  branco_intenso	equ		15
   771                                  
   772 00000001 00                      modo_anterior	db		0
   773 00000002 0000                    linha   	dw  		0
   774 00000004 0000                    coluna  	dw  		0
   775 00000006 0000                    deltax		dw		0
   776 00000008 0000                    deltay		dw		0	
   777 0000000A 45786572636963696F-     mens    	db  'Exercicio de Programacao de Sistemas Embarcados 1 - 2023/2'
   778 00000013 2064652050726F6772-
   779 0000001C 616D6163616F206465-
   780 00000025 2053697374656D6173-
   781 0000002E 20456D626172636164-
   782 00000037 6F732031202D203230-
   783 00000040 32332F32           
   784                                  
   785 00000044 FA00                    velocidade	dw	250
   786 00000046 0A00                    vx			dw	10
   787 00000048 0A00                    vy			dw	10
   788                                  ;*************************************************************************
   789                                  segment stack stack
   790 00000000 <res 00000200>              		resb 		512
   791                                  stacktop:
   792                                  
