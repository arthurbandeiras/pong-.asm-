     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                    		mov 		ax,data
     8 00000003 8ED8                        		mov 		ds,ax
     9 00000005 B8[0000]                    		mov 		ax,stack
    10 00000008 8ED0                        		mov 		ss,ax
    11 0000000A BC[0002]                    		mov 		sp,stacktop
    12                                  
    13                                  
    14                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    15 0000000D B40F                                mov  		ah,0Fh
    16 0000000F CD10                        		int  		10h
    17 00000011 A2[0100]                    		mov  		[modo_anterior],al   
    18                                  
    19                                  
    20                                  ; alterar modo de video para gr�fico 640x480 16 cores
    21 00000014 B012                        	mov     	al,12h
    22 00000016 B400                       		mov     	ah,0
    23 00000018 CD10                        	int     	10h
    24                                  
    25                                  
    26                                  
    27                                  ;***************************************************;
    28                                  ;			   definições pré código				;
    29                                  ;***************************************************;
    30                                  
    31                                  ;limpa si, di, e define onde a bolinha começa
    32 0000001A 31F6                    		xor si, si
    33 0000001C 31FF                    		xor di, di
    34 0000001E BE3F01                  		mov si, 319
    35 00000021 BFF000                  		mov di, 240
    36 00000024 B950C3                  		mov cx, 50000
    37 00000027 E8AF00                  		call set_caracter1
    38                                  ;define a quantidade de loops completos (tempo de jogo
    39                                  main:
    40                                  	;circulos vermelhos
    41 0000002A C606[0000]04            	mov     byte[cor],vermelho  
    42 0000002F 89F0                    	mov     ax, si
    43 00000031 50                      	push        ax
    44 00000032 89F8                    	mov     ax, di
    45 00000034 50                      	push        ax
    46 00000035 B80A00                  	mov     ax,10
    47 00000038 50                      	push        ax
    48 00000039 E81302                  	call full_circle
    49 0000003C E8D203                  	call delay
    50 0000003F 58                      	pop ax
    51 00000040 58                      	pop ax
    52 00000041 58                      	pop ax
    53                                  
    54                                  	;apaga circulos (circulos pretos)
    55 00000042 C606[0000]00            	mov     byte[cor],preto
    56 00000047 89F0                    	mov     ax, si
    57 00000049 50                      	push        ax
    58 0000004A 89F8                    	mov     ax, di
    59 0000004C 50                      	push        ax
    60 0000004D B80A00                  	mov     ax,10
    61 00000050 50                      	push        ax
    62 00000051 E8FB01                  	call full_circle
    63 00000054 58                      	pop ax
    64 00000055 58                      	pop ax
    65 00000056 58                      	pop ax
    66                                  			
    67                                  
    68 00000057 0336[5E00]              	add si, word[vx]
    69 0000005B 033E[6000]              	add di, word[vy]
    70 0000005F 81FE0A00                	cmp si, 10
    71 00000063 7E17                    	jle	bate_esquerda
    72 00000065 81FE7302                	cmp si, 627
    73 00000069 7D1A                    	jge bate_direita 
    74 0000006B 81FFA301                	cmp di, 419
    75 0000006F 7D1D                    	jge bate_cima
    76 00000071 81FF0A00                	cmp di, 10
    77 00000075 7E20                    	jle bate_baixo 
    78 00000077 E82600                  	call desenha_cabeçalho
    79 0000007A E2AE                    loop main
    80                                  
    81                                  bate_esquerda:
    82 0000007C C706[5E00]0A00          	mov word[vx], 10
    83 00000082 E9A5FF                  jmp main
    84                                  
    85                                  bate_direita:
    86 00000085 C706[5E00]F6FF          	mov word[vx], -10    
    87 0000008B E99CFF                  jmp main
    88                                  
    89                                  bate_cima:
    90 0000008E C706[6000]F6FF          	mov word[vy], -10
    91 00000094 E993FF                  jmp main
    92                                  
    93                                  bate_baixo:
    94 00000097 C706[6000]0A00          	mov word[vy], 10    
    95 0000009D E98AFF                  jmp main
    96                                  
    97                                  
    98                                  
    99                                  ;desenha_bordas:
   100                                  	;;borda superior (x1, y1, x2, y2)
   101                                  	;mov		byte[cor],branco_intenso	
   102                                  	;mov		ax,0
   103                                  	;push		ax
   104                                  	;mov		ax,0
   105                                  	;push		ax
   106                                  	;mov		ax,639
   107                                  	;push		ax
   108                                  	;mov		ax,0
   109                                  	;push		ax
   110                                  	;call line
   111                                  	;pop ax
   112                                  	;pop ax
   113                                  	;pop ax
   114                                  	;;borda inferior (x1, y1, x2, y2)
   115                                  	;mov		byte[cor],branco_intenso	
   116                                  	;mov		ax,0
   117                                  	;push		ax
   118                                  	;mov		ax,479
   119                                  	;push		ax
   120                                  	;mov		ax,639
   121                                  	;push		ax
   122                                  	;mov		ax,479
   123                                  	;push		ax
   124                                  	;call line
   125                                  	;pop ax
   126                                  	;pop ax
   127                                  	;pop ax
   128                                  	;;borda esquerda (x1, y1, x2, y2)
   129                                  	;mov		byte[cor],branco_intenso	
   130                                  	;mov		ax,0
   131                                  	;push		ax
   132                                  	;mov		ax,0
   133                                  	;push		ax
   134                                  	;mov		ax,0
   135                                  	;push		ax
   136                                  	;mov		ax,479
   137                                  	;push		ax
   138                                  	;call line
   139                                  	;pop ax
   140                                  	;pop ax
   141                                  	;pop ax
   142                                  	;;borda direita (x1, y1, x2, y2)
   143                                  	;mov		byte[cor],branco_intenso	
   144                                  	;mov		ax,639
   145                                  	;push		ax
   146                                  	;mov		ax,0
   147                                  	;push		ax
   148                                  	;mov		ax,639
   149                                  	;push		ax
   150                                  	;mov		ax,479
   151                                  	;push		ax
   152                                  	;call line
   153                                  	;pop ax
   154                                  	;pop ax
   155                                  	;pop ax
   156                                  
   157                                  desenha_cabeçalho:
   158                                  	;borda cabeçalho (x1, y1, x2, y2)
   159 000000A0 C606[0000]0F            	mov		byte[cor],branco_intenso	
   160 000000A5 B80000                  	mov		ax,0
   161 000000A8 50                      	push		ax
   162 000000A9 B8AE01                  	mov		ax,430
   163 000000AC 50                      	push		ax
   164 000000AD B88002                  	mov		ax,640
   165 000000B0 50                      	push		ax
   166 000000B1 B8AE01                  	mov		ax,430
   167 000000B4 50                      	push		ax
   168 000000B5 E85402                  	call line
   169 000000B8 58                      	pop ax
   170 000000B9 58                      	pop ax
   171 000000BA 58                      	pop ax
   172                                  	
   173                                  desenha_raquete:
   174                                  	;raquete (x1, y1, x2, y2)
   175 000000BB C606[0000]0F            	mov		byte[cor],branco_intenso	
   176 000000C0 A1[6200]                	mov		ax,word[raqx]
   177 000000C3 50                      	push		ax
   178 000000C4 B8D600                  	mov		ax,214
   179 000000C7 50                      	push		ax
   180 000000C8 A1[6200]                	mov		ax,word[raqx]
   181 000000CB 50                      	push		ax
   182 000000CC B8FE00                  	mov		ax,254
   183 000000CF 50                      	push		ax
   184 000000D0 E83902                  	call line
   185 000000D3 58                      	pop ax
   186 000000D4 58                      	pop ax
   187 000000D5 58                      	pop ax
   188                                  
   189 000000D6 E951FF                  jmp main
   190                                  
   191                                  ;escrever uma mensagem
   192                                  set_caracter1:
   193 000000D9 B93A00                      mov     	cx,58			;n�mero de caracteres
   194 000000DC BB0000                      mov     	bx,0
   195 000000DF B600                        mov     	dh,0			;linha 0-29
   196 000000E1 B200                        mov     	dl,0			;coluna 0-79
   197 000000E3 C606[0000]0F            	mov		byte[cor],branco_intenso
   198                                  l4:
   199 000000E8 E82A00                  		call	cursor
   200 000000EB 8A87[0A00]                  	mov     al,[bx+mens1]
   201 000000EF E83A00                  		call	caracter
   202 000000F2 43                          	inc     bx			;proximo caracter
   203 000000F3 FEC2                    		inc		dl			;avanca a coluna
   204 000000F5 E2F1                        	loop    l4
   205                                  set_caracter2:
   206 000000F7 B91800                  	mov     	cx,24			;n�mero de caracteres
   207 000000FA BB0000                      mov     	bx,0
   208 000000FD B601                        mov     	dh,1			;linha 0-29
   209 000000FF B200                        mov     	dl,0			;coluna 0-79
   210 00000101 C606[0000]0F            	mov		byte[cor],branco_intenso
   211                                  write_name:
   212 00000106 E80C00                  		call	cursor
   213 00000109 8A87[4400]                  	mov     al,[bx+mens2]
   214 0000010D E81C00                  		call	caracter
   215 00000110 43                          	inc     bx			;proximo caracter
   216 00000111 FEC2                    		inc		dl			;avanca a coluna
   217 00000113 E2F1                        	loop    write_name
   218                                  
   219                                  
   220                                  
   221                                  		;mov    	ah,08h
   222                                  		;int     21h
   223                                  	    ;mov  	ah,0   			; set video mode
   224                                  	    ;mov  	al,[modo_anterior]   	; modo anterior
   225                                  	    ;int  	10h
   226                                  		;mov 	al,0
   227                                  ;***************************************************************************
   228                                  ;
   229                                  ;   fun��o cursor
   230                                  ;
   231                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   232                                  cursor:
   233 00000115 9C                      		pushf
   234 00000116 50                      		push 		ax
   235 00000117 53                      		push 		bx
   236 00000118 51                      		push		cx
   237 00000119 52                      		push		dx
   238 0000011A 56                      		push		si
   239 0000011B 57                      		push		di
   240 0000011C 55                      		push		bp
   241 0000011D B402                    		mov     	ah,2
   242 0000011F B700                    		mov     	bh,0
   243 00000121 CD10                    		int     	10h
   244 00000123 5D                      		pop		bp
   245 00000124 5F                      		pop		di
   246 00000125 5E                      		pop		si
   247 00000126 5A                      		pop		dx
   248 00000127 59                      		pop		cx
   249 00000128 5B                      		pop		bx
   250 00000129 58                      		pop		ax
   251 0000012A 9D                      		popf
   252 0000012B C3                      		ret
   253                                  ;_____________________________________________________________________________
   254                                  ;
   255                                  ;   fun��o caracter escrito na posi��o do cursor
   256                                  ;
   257                                  ; al= caracter a ser escrito
   258                                  ; cor definida na variavel cor
   259                                  caracter:
   260 0000012C 9C                      		pushf
   261 0000012D 50                      		push 		ax
   262 0000012E 53                      		push 		bx
   263 0000012F 51                      		push		cx
   264 00000130 52                      		push		dx
   265 00000131 56                      		push		si
   266 00000132 57                      		push		di
   267 00000133 55                      		push		bp
   268 00000134 B409                        		mov     	ah,9
   269 00000136 B700                        		mov     	bh,0
   270 00000138 B90100                      		mov     	cx,1
   271 0000013B 8A1E[0000]                 		mov     	bl,[cor]
   272 0000013F CD10                        		int     	10h
   273 00000141 5D                      		pop		bp
   274 00000142 5F                      		pop		di
   275 00000143 5E                      		pop		si
   276 00000144 5A                      		pop		dx
   277 00000145 59                      		pop		cx
   278 00000146 5B                      		pop		bx
   279 00000147 58                      		pop		ax
   280 00000148 9D                      		popf
   281 00000149 C3                      		ret
   282                                  ;_____________________________________________________________________________
   283                                  ;
   284                                  ;   fun��o plot_xy
   285                                  ;
   286                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   287                                  ; cor definida na variavel cor
   288                                  plot_xy:
   289 0000014A 55                      		push		bp
   290 0000014B 89E5                    		mov		bp,sp
   291 0000014D 9C                      		pushf
   292 0000014E 50                      		push 		ax
   293 0000014F 53                      		push 		bx
   294 00000150 51                      		push		cx
   295 00000151 52                      		push		dx
   296 00000152 56                      		push		si
   297 00000153 57                      		push		di
   298 00000154 B40C                    	    mov     	ah,0ch
   299 00000156 A0[0000]                	    mov     	al,[cor]
   300 00000159 B700                    	    mov     	bh,0
   301 0000015B BADF01                  	    mov     	dx,479
   302 0000015E 2B5604                  		sub		dx,[bp+4]
   303 00000161 8B4E06                  	    mov     	cx,[bp+6]
   304 00000164 CD10                    	    int     	10h
   305 00000166 5F                      		pop		di
   306 00000167 5E                      		pop		si
   307 00000168 5A                      		pop		dx
   308 00000169 59                      		pop		cx
   309 0000016A 5B                      		pop		bx
   310 0000016B 58                      		pop		ax
   311 0000016C 9D                      		popf
   312 0000016D 5D                      		pop		bp
   313 0000016E C20400                  		ret		4
   314                                  ;_____________________________________________________________________________
   315                                  ;    fun��o circle
   316                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   317                                  ; cor definida na variavel cor
   318                                  circle:
   319 00000171 55                      	push 	bp
   320 00000172 89E5                    	mov	 	bp,sp
   321 00000174 9C                      	pushf                        ;coloca os flags na pilha
   322 00000175 50                      	push 	ax
   323 00000176 53                      	push 	bx
   324 00000177 51                      	push	cx
   325 00000178 52                      	push	dx
   326 00000179 56                      	push	si
   327 0000017A 57                      	push	di
   328                                  	
   329 0000017B 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   330 0000017E 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   331 00000181 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   332                                  	
   333 00000184 89DA                    	mov 	dx,bx	
   334 00000186 01CA                    	add		dx,cx       ;ponto extremo superior
   335 00000188 50                      	push    ax			
   336 00000189 52                      	push	dx
   337 0000018A E8BDFF                  	call plot_xy
   338                                  	
   339 0000018D 89DA                    	mov		dx,bx
   340 0000018F 29CA                    	sub		dx,cx       ;ponto extremo inferior
   341 00000191 50                      	push    ax			
   342 00000192 52                      	push	dx
   343 00000193 E8B4FF                  	call plot_xy
   344                                  	
   345 00000196 89C2                    	mov 	dx,ax	
   346 00000198 01CA                    	add		dx,cx       ;ponto extremo direita
   347 0000019A 52                      	push    dx			
   348 0000019B 53                      	push	bx
   349 0000019C E8ABFF                  	call plot_xy
   350                                  	
   351 0000019F 89C2                    	mov		dx,ax
   352 000001A1 29CA                    	sub		dx,cx       ;ponto extremo esquerda
   353 000001A3 52                      	push    dx			
   354 000001A4 53                      	push	bx
   355 000001A5 E8A2FF                  	call plot_xy
   356                                  		
   357 000001A8 89CF                    	mov		di,cx
   358 000001AA 81EF0100                	sub		di,1	 ;di=r-1
   359 000001AE BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   360                                  	
   361                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   362                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   363                                  ;valores positivos para d
   364                                  
   365                                  stay:				;loop
   366 000001B1 89FE                    	mov		si,di
   367 000001B3 81FE0000                	cmp		si,0
   368 000001B7 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   369 000001B9 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   370 000001BB D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   371 000001BD 81C60300                	add		si,3
   372 000001C1 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   373 000001C3 42                      	inc		dx		;incrementa dx
   374 000001C4 E90E00                  	jmp		plotar
   375                                  inf:	
   376 000001C7 89D6                    	mov		si,dx
   377 000001C9 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   378 000001CB D1E6                    	sal		si,1
   379 000001CD 81C60500                	add		si,5
   380 000001D1 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   381 000001D3 42                      	inc		dx		;incrementa x (dx)
   382 000001D4 49                      	dec		cx		;decrementa y (cx)
   383                                  	
   384                                  plotar:	
   385 000001D5 89D6                    	mov		si,dx
   386 000001D7 01C6                    	add		si,ax
   387 000001D9 56                      	push    si			;coloca a abcisa x+xc na pilha
   388 000001DA 89CE                    	mov		si,cx
   389 000001DC 01DE                    	add		si,bx
   390 000001DE 56                      	push    si			;coloca a ordenada y+yc na pilha
   391 000001DF E868FF                  	call plot_xy		;toma conta do segundo octante
   392 000001E2 89C6                    	mov		si,ax
   393 000001E4 01D6                    	add		si,dx
   394 000001E6 56                      	push    si			;coloca a abcisa xc+x na pilha
   395 000001E7 89DE                    	mov		si,bx
   396 000001E9 29CE                    	sub		si,cx
   397 000001EB 56                      	push    si			;coloca a ordenada yc-y na pilha
   398 000001EC E85BFF                  	call plot_xy		;toma conta do s�timo octante
   399 000001EF 89C6                    	mov		si,ax
   400 000001F1 01CE                    	add		si,cx
   401 000001F3 56                      	push    si			;coloca a abcisa xc+y na pilha
   402 000001F4 89DE                    	mov		si,bx
   403 000001F6 01D6                    	add		si,dx
   404 000001F8 56                      	push    si			;coloca a ordenada yc+x na pilha
   405 000001F9 E84EFF                  	call plot_xy		;toma conta do segundo octante
   406 000001FC 89C6                    	mov		si,ax
   407 000001FE 01CE                    	add		si,cx
   408 00000200 56                      	push    si			;coloca a abcisa xc+y na pilha
   409 00000201 89DE                    	mov		si,bx
   410 00000203 29D6                    	sub		si,dx
   411 00000205 56                      	push    si			;coloca a ordenada yc-x na pilha
   412 00000206 E841FF                  	call plot_xy		;toma conta do oitavo octante
   413 00000209 89C6                    	mov		si,ax
   414 0000020B 29D6                    	sub		si,dx
   415 0000020D 56                      	push    si			;coloca a abcisa xc-x na pilha
   416 0000020E 89DE                    	mov		si,bx
   417 00000210 01CE                    	add		si,cx
   418 00000212 56                      	push    si			;coloca a ordenada yc+y na pilha
   419 00000213 E834FF                  	call plot_xy		;toma conta do terceiro octante
   420 00000216 89C6                    	mov		si,ax
   421 00000218 29D6                    	sub		si,dx
   422 0000021A 56                      	push    si			;coloca a abcisa xc-x na pilha
   423 0000021B 89DE                    	mov		si,bx
   424 0000021D 29CE                    	sub		si,cx
   425 0000021F 56                      	push    si			;coloca a ordenada yc-y na pilha
   426 00000220 E827FF                  	call plot_xy		;toma conta do sexto octante
   427 00000223 89C6                    	mov		si,ax
   428 00000225 29CE                    	sub		si,cx
   429 00000227 56                      	push    si			;coloca a abcisa xc-y na pilha
   430 00000228 89DE                    	mov		si,bx
   431 0000022A 29D6                    	sub		si,dx
   432 0000022C 56                      	push    si			;coloca a ordenada yc-x na pilha
   433 0000022D E81AFF                  	call plot_xy		;toma conta do quinto octante
   434 00000230 89C6                    	mov		si,ax
   435 00000232 29CE                    	sub		si,cx
   436 00000234 56                      	push    si			;coloca a abcisa xc-y na pilha
   437 00000235 89DE                    	mov		si,bx
   438 00000237 01D6                    	add		si,dx
   439 00000239 56                      	push    si			;coloca a ordenada yc-x na pilha
   440 0000023A E80DFF                  	call plot_xy		;toma conta do quarto octante
   441                                  	
   442 0000023D 39D1                    	cmp		cx,dx
   443 0000023F 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   444 00000241 E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   445                                  	
   446                                  	
   447                                  fim_circle:
   448 00000244 5F                      	pop		di
   449 00000245 5E                      	pop		si
   450 00000246 5A                      	pop		dx
   451 00000247 59                      	pop		cx
   452 00000248 5B                      	pop		bx
   453 00000249 58                      	pop		ax
   454 0000024A 9D                      	popf
   455 0000024B 5D                      	pop		bp
   456 0000024C C20600                  	ret		6
   457                                  ;-----------------------------------------------------------------------------
   458                                  ;    fun��o full_circle
   459                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   460                                  ; cor definida na variavel cor					  
   461                                  full_circle:
   462 0000024F 55                      	push 	bp
   463 00000250 89E5                    	mov	 	bp,sp
   464 00000252 9C                      	pushf                        ;coloca os flags na pilha
   465 00000253 50                      	push 	ax
   466 00000254 53                      	push 	bx
   467 00000255 51                      	push	cx
   468 00000256 52                      	push	dx
   469 00000257 56                      	push	si
   470 00000258 57                      	push	di
   471                                  
   472 00000259 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   473 0000025C 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   474 0000025F 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   475                                  	
   476 00000262 89DE                    	mov		si,bx
   477 00000264 29CE                    	sub		si,cx
   478 00000266 50                      	push    ax			;coloca xc na pilha			
   479 00000267 56                      	push	si			;coloca yc-r na pilha
   480 00000268 89DE                    	mov		si,bx
   481 0000026A 01CE                    	add		si,cx
   482 0000026C 50                      	push	ax		;coloca xc na pilha
   483 0000026D 56                      	push	si		;coloca yc+r na pilha
   484 0000026E E89B00                  	call line
   485                                  	
   486                                  		
   487 00000271 89CF                    	mov		di,cx
   488 00000273 81EF0100                	sub		di,1	 ;di=r-1
   489 00000277 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   490                                  	
   491                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   492                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   493                                  ;valores positivos para d
   494                                  
   495                                  stay_full:				;loop
   496 0000027A 89FE                    	mov		si,di
   497 0000027C 81FE0000                	cmp		si,0
   498 00000280 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   499 00000282 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   500 00000284 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   501 00000286 81C60300                	add		si,3
   502 0000028A 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   503 0000028C 42                      	inc		dx		;incrementa dx
   504 0000028D E90E00                  	jmp		plotar_full
   505                                  inf_full:	
   506 00000290 89D6                    	mov		si,dx
   507 00000292 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   508 00000294 D1E6                    	sal		si,1
   509 00000296 81C60500                	add		si,5
   510 0000029A 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   511 0000029C 42                      	inc		dx		;incrementa x (dx)
   512 0000029D 49                      	dec		cx		;decrementa y (cx)
   513                                  	
   514                                  plotar_full:	
   515 0000029E 89C6                    	mov		si,ax
   516 000002A0 01CE                    	add		si,cx
   517 000002A2 56                      	push	si		;coloca a abcisa y+xc na pilha			
   518 000002A3 89DE                    	mov		si,bx
   519 000002A5 29D6                    	sub		si,dx
   520 000002A7 56                      	push    si		;coloca a ordenada yc-x na pilha
   521 000002A8 89C6                    	mov		si,ax
   522 000002AA 01CE                    	add		si,cx
   523 000002AC 56                      	push	si		;coloca a abcisa y+xc na pilha	
   524 000002AD 89DE                    	mov		si,bx
   525 000002AF 01D6                    	add		si,dx
   526 000002B1 56                      	push    si		;coloca a ordenada yc+x na pilha	
   527 000002B2 E85700                  	call 	line
   528                                  	
   529 000002B5 89C6                    	mov		si,ax
   530 000002B7 01D6                    	add		si,dx
   531 000002B9 56                      	push	si		;coloca a abcisa xc+x na pilha			
   532 000002BA 89DE                    	mov		si,bx
   533 000002BC 29CE                    	sub		si,cx
   534 000002BE 56                      	push    si		;coloca a ordenada yc-y na pilha
   535 000002BF 89C6                    	mov		si,ax
   536 000002C1 01D6                    	add		si,dx
   537 000002C3 56                      	push	si		;coloca a abcisa xc+x na pilha	
   538 000002C4 89DE                    	mov		si,bx
   539 000002C6 01CE                    	add		si,cx
   540 000002C8 56                      	push    si		;coloca a ordenada yc+y na pilha	
   541 000002C9 E84000                  	call	line
   542                                  	
   543 000002CC 89C6                    	mov		si,ax
   544 000002CE 29D6                    	sub		si,dx
   545 000002D0 56                      	push	si		;coloca a abcisa xc-x na pilha			
   546 000002D1 89DE                    	mov		si,bx
   547 000002D3 29CE                    	sub		si,cx
   548 000002D5 56                      	push    si		;coloca a ordenada yc-y na pilha
   549 000002D6 89C6                    	mov		si,ax
   550 000002D8 29D6                    	sub		si,dx
   551 000002DA 56                      	push	si		;coloca a abcisa xc-x na pilha	
   552 000002DB 89DE                    	mov		si,bx
   553 000002DD 01CE                    	add		si,cx
   554 000002DF 56                      	push    si		;coloca a ordenada yc+y na pilha	
   555 000002E0 E82900                  	call	line
   556                                  	
   557 000002E3 89C6                    	mov		si,ax
   558 000002E5 29CE                    	sub		si,cx
   559 000002E7 56                      	push	si		;coloca a abcisa xc-y na pilha			
   560 000002E8 89DE                    	mov		si,bx
   561 000002EA 29D6                    	sub		si,dx
   562 000002EC 56                      	push    si		;coloca a ordenada yc-x na pilha
   563 000002ED 89C6                    	mov		si,ax
   564 000002EF 29CE                    	sub		si,cx
   565 000002F1 56                      	push	si		;coloca a abcisa xc-y na pilha	
   566 000002F2 89DE                    	mov		si,bx
   567 000002F4 01D6                    	add		si,dx
   568 000002F6 56                      	push    si		;coloca a ordenada yc+x na pilha	
   569 000002F7 E81200                  	call	line
   570                                  	
   571 000002FA 39D1                    	cmp		cx,dx
   572 000002FC 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   573 000002FE E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   574                                  	
   575                                  	
   576                                  fim_full_circle:
   577 00000301 5F                      	pop		di
   578 00000302 5E                      	pop		si
   579 00000303 5A                      	pop		dx
   580 00000304 59                      	pop		cx
   581 00000305 5B                      	pop		bx
   582 00000306 58                      	pop		ax
   583 00000307 9D                      	popf
   584 00000308 5D                      	pop		bp
   585 00000309 C20600                  	ret		6
   586                                  ;-----------------------------------------------------------------------------
   587                                  ;
   588                                  ;   fun��o line
   589                                  ;
   590                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   591                                  line:
   592 0000030C 55                      		push		bp
   593 0000030D 89E5                    		mov		bp,sp
   594 0000030F 9C                      		pushf                        ;coloca os flags na pilha
   595 00000310 50                      		push 		ax
   596 00000311 53                      		push 		bx
   597 00000312 51                      		push		cx
   598 00000313 52                      		push		dx
   599 00000314 56                      		push		si
   600 00000315 57                      		push		di
   601 00000316 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   602 00000319 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   603 0000031C 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   604 0000031F 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   605 00000322 39C8                    		cmp		ax,cx
   606 00000324 7408                    		je		line2
   607 00000326 721C                    		jb		line1
   608 00000328 91                      		xchg		ax,cx
   609 00000329 87DA                    		xchg		bx,dx
   610 0000032B E91600                  		jmp		line1
   611                                  line2:		; deltax=0
   612 0000032E 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   613 00000330 7202                    		jb		line3
   614 00000332 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   615                                  line3:	; dx > bx
   616 00000334 50                      		push		ax
   617 00000335 53                      		push		bx
   618 00000336 E811FE                  		call 		plot_xy
   619 00000339 39D3                    		cmp		bx,dx
   620 0000033B 7503                    		jne		line31
   621 0000033D E9C600                  		jmp		fim_line
   622 00000340 43                      line31:		inc		bx
   623 00000341 E9F0FF                  		jmp		line3
   624                                  ;deltax <>0
   625                                  line1:
   626                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   627                                  	; cx > ax
   628 00000344 51                      		push		cx
   629 00000345 29C1                    		sub		cx,ax
   630 00000347 890E[0600]              		mov		[deltax],cx
   631 0000034B 59                      		pop		cx
   632 0000034C 52                      		push		dx
   633 0000034D 29DA                    		sub		dx,bx
   634 0000034F 7702                    		ja		line32
   635 00000351 F7DA                    		neg		dx
   636                                  line32:		
   637 00000353 8916[0800]              		mov		[deltay],dx
   638 00000357 5A                      		pop		dx
   639                                  
   640 00000358 50                      		push		ax
   641 00000359 A1[0600]                		mov		ax,[deltax]
   642 0000035C 3B06[0800]              		cmp		ax,[deltay]
   643 00000360 58                      		pop		ax
   644 00000361 724D                    		jb		line5
   645                                  
   646                                  	; cx > ax e deltax>deltay
   647 00000363 51                      		push		cx
   648 00000364 29C1                    		sub		cx,ax
   649 00000366 890E[0600]              		mov		[deltax],cx
   650 0000036A 59                      		pop		cx
   651 0000036B 52                      		push		dx
   652 0000036C 29DA                    		sub		dx,bx
   653 0000036E 8916[0800]              		mov		[deltay],dx
   654 00000372 5A                      		pop		dx
   655                                  
   656 00000373 89C6                    		mov		si,ax
   657                                  line4:
   658 00000375 50                      		push		ax
   659 00000376 52                      		push		dx
   660 00000377 56                      		push		si
   661 00000378 29C6                    		sub		si,ax	;(x-x1)
   662 0000037A A1[0800]                		mov		ax,[deltay]
   663 0000037D F7EE                    		imul		si
   664 0000037F 8B36[0600]              		mov		si,[deltax]		;arredondar
   665 00000383 D1EE                    		shr		si,1
   666                                  ; se numerador (DX)>0 soma se <0 subtrai
   667 00000385 81FA0000                		cmp		dx,0
   668 00000389 7C09                    		jl		ar1
   669 0000038B 01F0                    		add		ax,si
   670 0000038D 81D20000                		adc		dx,0
   671 00000391 E90600                  		jmp		arc1
   672 00000394 29F0                    ar1:		sub		ax,si
   673 00000396 81DA0000                		sbb		dx,0
   674                                  arc1:
   675 0000039A F73E[0600]              		idiv		word [deltax]
   676 0000039E 01D8                    		add		ax,bx
   677 000003A0 5E                      		pop		si
   678 000003A1 56                      		push		si
   679 000003A2 50                      		push		ax
   680 000003A3 E8A4FD                  		call		plot_xy
   681 000003A6 5A                      		pop		dx
   682 000003A7 58                      		pop		ax
   683 000003A8 39CE                    		cmp		si,cx
   684 000003AA 745A                    		je		fim_line
   685 000003AC 46                      		inc		si
   686 000003AD E9C5FF                  		jmp		line4
   687                                  
   688 000003B0 39D3                    line5:		cmp		bx,dx
   689 000003B2 7203                    		jb 		line7
   690 000003B4 91                      		xchg		ax,cx
   691 000003B5 87DA                    		xchg		bx,dx
   692                                  line7:
   693 000003B7 51                      		push		cx
   694 000003B8 29C1                    		sub		cx,ax
   695 000003BA 890E[0600]              		mov		[deltax],cx
   696 000003BE 59                      		pop		cx
   697 000003BF 52                      		push		dx
   698 000003C0 29DA                    		sub		dx,bx
   699 000003C2 8916[0800]              		mov		[deltay],dx
   700 000003C6 5A                      		pop		dx
   701                                  
   702                                  
   703                                  
   704 000003C7 89DE                    		mov		si,bx
   705                                  line6:
   706 000003C9 52                      		push		dx
   707 000003CA 56                      		push		si
   708 000003CB 50                      		push		ax
   709 000003CC 29DE                    		sub		si,bx	;(y-y1)
   710 000003CE A1[0600]                		mov		ax,[deltax]
   711 000003D1 F7EE                    		imul		si
   712 000003D3 8B36[0800]              		mov		si,[deltay]		;arredondar
   713 000003D7 D1EE                    		shr		si,1
   714                                  ; se numerador (DX)>0 soma se <0 subtrai
   715 000003D9 81FA0000                		cmp		dx,0
   716 000003DD 7C09                    		jl		ar2
   717 000003DF 01F0                    		add		ax,si
   718 000003E1 81D20000                		adc		dx,0
   719 000003E5 E90600                  		jmp		arc2
   720 000003E8 29F0                    ar2:		sub		ax,si
   721 000003EA 81DA0000                		sbb		dx,0
   722                                  arc2:
   723 000003EE F73E[0800]              		idiv		word [deltay]
   724 000003F2 89C7                    		mov		di,ax
   725 000003F4 58                      		pop		ax
   726 000003F5 01C7                    		add		di,ax
   727 000003F7 5E                      		pop		si
   728 000003F8 57                      		push		di
   729 000003F9 56                      		push		si
   730 000003FA E84DFD                  		call		plot_xy
   731 000003FD 5A                      		pop		dx
   732 000003FE 39D6                    		cmp		si,dx
   733 00000400 7404                    		je		fim_line
   734 00000402 46                      		inc		si
   735 00000403 E9C3FF                  		jmp		line6
   736                                  
   737                                  fim_line:
   738 00000406 5F                      		pop		di
   739 00000407 5E                      		pop		si
   740 00000408 5A                      		pop		dx
   741 00000409 59                      		pop		cx
   742 0000040A 5B                      		pop		bx
   743 0000040B 58                      		pop		ax
   744 0000040C 9D                      		popf
   745 0000040D 5D                      		pop		bp
   746 0000040E C20800                  		ret		8
   747                                  
   748                                  
   749                                  
   750                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   751 00000411 51                          push cx
   752 00000412 8B0E[5C00]                  mov cx, word [velocidade] ; Carrega “velocidade” em cx (contador para loop)
   753                                  del2:
   754 00000416 51                          push cx ; Coloca cx na pilha para usa-lo em outro loop
   755 00000417 B90005                      mov cx, 0500h ; Teste modificando este valor
   756                                  del1:
   757 0000041A E2FE                        loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   758 0000041C 59                          pop cx ; Recupera cx da pilha
   759 0000041D E2F7                        loop del2 ; No loop del2, cx é decrementado até que seja zero
   760 0000041F 59                          pop cx
   761 00000420 C3                          ret
   762                                  
   763                                  ;*******************************************************************
   764                                  segment data
   765                                  
   766 00000000 0F                      cor		db		branco_intenso
   767                                  
   768                                  ;	I R G B COR
   769                                  ;	0 0 0 0 preto
   770                                  ;	0 0 0 1 azul
   771                                  ;	0 0 1 0 verde
   772                                  ;	0 0 1 1 cyan
   773                                  ;	0 1 0 0 vermelho
   774                                  ;	0 1 0 1 magenta
   775                                  ;	0 1 1 0 marrom
   776                                  ;	0 1 1 1 branco
   777                                  ;	1 0 0 0 cinza
   778                                  ;	1 0 0 1 azul claro
   779                                  ;	1 0 1 0 verde claro
   780                                  ;	1 0 1 1 cyan claro
   781                                  ;	1 1 0 0 rosa
   782                                  ;	1 1 0 1 magenta claro
   783                                  ;	1 1 1 0 amarelo
   784                                  ;	1 1 1 1 branco intenso
   785                                  
   786                                  preto		equ		0
   787                                  azul		equ		1
   788                                  verde		equ		2
   789                                  cyan		equ		3
   790                                  vermelho	equ		4
   791                                  magenta		equ		5
   792                                  marrom		equ		6
   793                                  branco		equ		7
   794                                  cinza		equ		8
   795                                  azul_claro	equ		9
   796                                  verde_claro	equ		10
   797                                  cyan_claro	equ		11
   798                                  rosa		equ		12
   799                                  magenta_claro	equ		13
   800                                  amarelo		equ		14
   801                                  branco_intenso	equ		15
   802                                  
   803 00000001 00                      modo_anterior	db		0
   804 00000002 0000                    linha   	dw  		0
   805 00000004 0000                    coluna  	dw  		0
   806 00000006 0000                    deltax		dw		0
   807 00000008 0000                    deltay		dw		0	
   808 0000000A 45786572636963696F-     mens1    	db  'Exercicio de Programacao de Sistemas Embarcados 1 - 2023/2'
   809 00000013 2064652050726F6772-
   810 0000001C 616D6163616F206465-
   811 00000025 2053697374656D6173-
   812 0000002E 20456D626172636164-
   813 00000037 6F732031202D203230-
   814 00000040 32332F32           
   815 00000044 417274687572204261-     mens2		db	'Arthur Bandeira Salvador'
   816 0000004D 6E6465697261205361-
   817 00000056 6C7661646F72       
   818                                  
   819 0000005C 7800                    velocidade	dw	120
   820 0000005E 0A00                    vx			dw	10
   821 00000060 0A00                    vy			dw	10
   822 00000062 5702                    raqx		dw 	599
   823                                  ;*************************************************************************
   824                                  segment stack stack
   825 00000000 <res 00000200>              		resb 		512
   826                                  stacktop:
   827                                  
