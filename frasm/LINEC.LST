     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                    		mov 		ax,data
     8 00000003 8ED8                        		mov 		ds,ax
     9 00000005 B8[0000]                    		mov 		ax,stack
    10 00000008 8ED0                        		mov 		ss,ax
    11 0000000A BC[0002]                    		mov 		sp,stacktop
    12                                  
    13                                  
    14                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    15 0000000D B40F                                mov  		ah,0Fh
    16 0000000F CD10                        		int  		10h
    17 00000011 A2[0100]                    		mov  		[modo_anterior],al   
    18                                  
    19                                  
    20                                  ; alterar modo de video para gr�fico 640x480 16 cores
    21 00000014 B012                        	mov     	al,12h
    22 00000016 B400                       		mov     	ah,0
    23 00000018 CD10                        	int     	10h
    24                                  
    25                                  
    26                                  
    27                                  ;***************************************************;
    28                                  ;			   definições pré código				;
    29                                  ;***************************************************;
    30                                  
    31                                  ;limpa si, di, e define onde a bolinha começa
    32 0000001A 31F6                    		xor si, si
    33 0000001C 31FF                    		xor di, di
    34 0000001E BE3F01                  		mov si, 319
    35 00000021 BFF000                  		mov di, 240
    36 00000024 B950C3                  		mov cx, 50000
    37 00000027 E87501                  		call set_caracter1
    38                                  comeco:
    39                                  ;define a quantidade de loops completos (tempo de jogo
    40                                  main:
    41                                  	;circulos vermelhos
    42 0000002A C606[0000]04            	mov     byte[cor],vermelho  
    43 0000002F 89F0                    	mov     ax, si
    44 00000031 50                      	push        ax
    45 00000032 89F8                    	mov     ax, di
    46 00000034 50                      	push        ax
    47 00000035 B80A00                  	mov     ax,10
    48 00000038 50                      	push        ax
    49 00000039 E8E802                  	call full_circle
    50 0000003C E8A704                  	call delay
    51 0000003F 58                      	pop ax
    52 00000040 58                      	pop ax
    53 00000041 58                      	pop ax
    54                                  	;apaga circulos (circulos pretos)
    55 00000042 C606[0000]00            	mov     byte[cor],preto
    56 00000047 89F0                    	mov     ax, si
    57 00000049 50                      	push        ax
    58 0000004A 89F8                    	mov     ax, di
    59 0000004C 50                      	push        ax
    60 0000004D B80A00                  	mov     ax,10
    61 00000050 50                      	push        ax
    62 00000051 E8D002                  	call full_circle
    63 00000054 58                      	pop ax
    64 00000055 58                      	pop ax
    65 00000056 58                      	pop ax		
    66                                  
    67 00000057 0336[5E00]              	add si, word[vx]
    68 0000005B 033E[6000]              	add di, word[vy]
    69                                  
    70 0000005F 81FE0A00                	cmp si, 10
    71 00000063 7E1D                    	jle	bate_esquerda
    72                                  volta1:
    73 00000065 81FE7302                	cmp si, 627
    74 00000069 7D22                    	jge bate_direita 
    75                                  volta2:
    76 0000006B 81FFA301                	cmp di, 419
    77 0000006F 7D2B                    	jge bate_cima
    78                                  volta3:
    79 00000071 81FF0A00                	cmp di, 10
    80 00000075 7E34                    	jle bate_baixo
    81                                  volta4:
    82 00000077 E8CA00                  	call desenha_cabeçalho
    83                                  desenhou:
    84 0000007A B401                    	mov ah, 01h
    85 0000007C CD16                    	int 16h
    86 0000007E 7539                    	jnz tecla_clicada
    87 00000080 E2A8                    loop main
    88                                  
    89                                  bate_esquerda:
    90 00000082 50                      	push ax
    91 00000083 A1[6200]                	mov ax, word[vatual]
    92 00000086 A3[5E00]                	mov word[vx], ax
    93 00000089 58                      	pop ax
    94 0000008A E9D8FF                  jmp volta1
    95                                  
    96                                  bate_direita:
    97 0000008D 50                      	push ax
    98 0000008E B8FFFF                  	mov ax, -1
    99 00000091 F726[6200]              	mul word[vatual]
   100 00000095 A3[5E00]                	mov word[vx], ax
   101 00000098 58                      	pop ax    
   102 00000099 E9CFFF                  jmp volta2
   103                                  
   104                                  bate_cima:
   105 0000009C 50                      	push ax
   106 0000009D B8FFFF                  	mov ax, -1
   107 000000A0 F726[6200]              	mul word[vatual]
   108 000000A4 A3[6000]                	mov word[vy], ax
   109 000000A7 58                      	pop ax
   110 000000A8 E9C6FF                  jmp volta3
   111                                  
   112                                  bate_baixo:
   113 000000AB 50                      	push ax
   114 000000AC A1[6200]                	mov ax, word[vatual]
   115 000000AF A3[6000]                	mov word[vy], ax
   116 000000B2 58                      	pop ax  
   117 000000B3 E9C1FF                  jmp volta4
   118                                  
   119                                  move_main:
   120 000000B6 E971FF                  	jmp main
   121                                  
   122                                  tecla_clicada:
   123 000000B9 B400                    	mov ah, 00h
   124 000000BB CD16                    	int 16h
   125 000000BD 3C73                    	cmp al, 73h ; 's'
   126 000000BF 747A                    	jz move_encerra
   127 000000C1 3C63                    	cmp al, 63h ; 'c'
   128 000000C3 740F                    	jz raquete_cima
   129 000000C5 3C62                    	cmp al, 62h	; 'b'
   130 000000C7 743D                    	jz raquete_baixo
   131 000000C9 3C6D                    	cmp al, 6dh ; 'm'
   132 000000CB 7471                    	jz move_menosvelo
   133 000000CD 3C70                    	cmp al, 70h ; 'p'
   134 000000CF 7470                    	jz move_maisvelo
   135 000000D1 E956FF                  jmp main
   136                                  
   137                                  raquete_cima:
   138 000000D4 813E[6600]9F01          	cmp word[raqf], 415
   139 000000DA 7DDA                    	jge move_main
   140                                  	
   141                                  	;apaga raquete antiga;
   142 000000DC C606[0000]00            	mov		byte[cor],preto	
   143 000000E1 B85702                  	mov		ax,599
   144 000000E4 50                      	push		ax
   145 000000E5 A1[6400]                	mov		ax,word[raqi]
   146 000000E8 50                      	push		ax
   147 000000E9 B85702                  	mov		ax,599
   148 000000EC 50                      	push		ax
   149 000000ED A1[6600]                	mov		ax,word[raqf]
   150 000000F0 50                      	push		ax
   151 000000F1 E8ED02                  	call line
   152 000000F4 58                      	pop ax
   153 000000F5 58                      	pop ax
   154 000000F6 58                      	pop ax
   155                                  	
   156                                  	;aumenta raqi e raqf;
   157 000000F7 8106[6400]0F00          	add word[raqi], 15
   158 000000FD 8106[6600]0F00          	add word[raqf], 15
   159 00000103 E924FF                  jmp main
   160                                  
   161                                  raquete_baixo:
   162 00000106 813E[6400]0F00          	cmp word[raqi], 15
   163 0000010C 7EA8                    	jle move_main
   164                                  	
   165                                  	;apaga raquete antiga;
   166 0000010E C606[0000]00            	mov		byte[cor],preto	
   167 00000113 B85702                  	mov		ax,599
   168 00000116 50                      	push		ax
   169 00000117 A1[6400]                	mov		ax,word[raqi]
   170 0000011A 50                      	push		ax
   171 0000011B B85702                  	mov		ax,599
   172 0000011E 50                      	push		ax
   173 0000011F A1[6600]                	mov		ax,word[raqf]
   174 00000122 50                      	push		ax
   175 00000123 E8BB02                  	call line
   176 00000126 58                      	pop ax
   177 00000127 58                      	pop ax
   178 00000128 58                      	pop ax
   179                                  	
   180                                  	;aumenta raqi e raqf;
   181 00000129 8106[6400]F1FF          	add word[raqi], -15
   182 0000012F 8106[6600]F1FF          	add word[raqf], -15
   183 00000135 E9F2FE                  jmp main
   184                                  
   185                                  move_main2:
   186 00000138 E9EFFE                  	jmp main
   187                                  move_encerra:
   188 0000013B E9A000                  	jmp encerra
   189                                  move_menosvelo:
   190 0000013E E93C00                  	jmp reduz_velo
   191                                  move_maisvelo:
   192 00000141 E94A00                  	jmp aumenta_velo
   193                                  
   194                                  desenha_cabeçalho:
   195                                  	;borda cabeçalho (x1, y1, x2, y2)
   196 00000144 C606[0000]0F            	mov		byte[cor],branco_intenso	
   197 00000149 B80000                  	mov		ax,0
   198 0000014C 50                      	push		ax
   199 0000014D B8AE01                  	mov		ax,430
   200 00000150 50                      	push		ax
   201 00000151 B88002                  	mov		ax,640
   202 00000154 50                      	push		ax
   203 00000155 B8AE01                  	mov		ax,430
   204 00000158 50                      	push		ax
   205 00000159 E88502                  	call line
   206 0000015C 58                      	pop ax
   207 0000015D 58                      	pop ax
   208 0000015E 58                      	pop ax
   209                                  	
   210                                  desenha_raquete:
   211                                  	;raquete (x1, y1, x2, y2)
   212 0000015F C606[0000]0F            	mov		byte[cor],branco_intenso	
   213 00000164 B85702                  	mov		ax,599
   214 00000167 50                      	push		ax
   215 00000168 A1[6400]                	mov		ax,word[raqi]
   216 0000016B 50                      	push		ax
   217 0000016C B85702                  	mov		ax,599
   218 0000016F 50                      	push		ax
   219 00000170 A1[6600]                	mov		ax,word[raqf]
   220 00000173 50                      	push		ax
   221 00000174 E86A02                  	call line
   222 00000177 58                      	pop ax
   223 00000178 58                      	pop ax
   224 00000179 58                      	pop ax
   225                                  
   226 0000017A E9FDFE                  jmp desenhou
   227                                  
   228                                  reduz_velo:
   229 0000017D 813E[6200]0A00          	cmp word[vatual], 10
   230 00000183 7EB3                    	jle move_main2
   231                                  	
   232 00000185 8106[6200]F6FF          	add word[vatual], -10
   233 0000018B E928FF                  jmp move_main
   234                                  aumenta_velo:
   235 0000018E 813E[6200]1E00          	cmp word[vatual], 30
   236 00000194 7DA2                    	jge move_main2
   237                                  	
   238 00000196 8106[6200]0A00          	add word[vatual], 10
   239 0000019C E917FF                  jmp move_main
   240                                  set_caracter1:
   241 0000019F B93A00                      mov     	cx,58			;n�mero de caracteres
   242 000001A2 BB0000                      mov     	bx,0
   243 000001A5 B600                        mov     	dh,0			;linha 0-29
   244 000001A7 B200                        mov     	dl,0			;coluna 0-79
   245 000001A9 C606[0000]0F            	mov		byte[cor],branco_intenso
   246                                  l4:
   247 000001AE E83900                  		call	cursor
   248 000001B1 8A87[0A00]                  	mov     al,[bx+mens1]
   249 000001B5 E84900                  		call	caracter
   250 000001B8 43                          	inc     bx			;proximo caracter
   251 000001B9 FEC2                    		inc		dl			;avanca a coluna
   252 000001BB E2F1                        	loop    l4
   253                                  set_caracter2:
   254 000001BD B91800                  	mov     	cx,24			;n�mero de caracteres
   255 000001C0 BB0000                      mov     	bx,0
   256 000001C3 B601                        mov     	dh,1			;linha 0-29
   257 000001C5 B200                        mov     	dl,0			;coluna 0-79
   258 000001C7 C606[0000]0F            	mov		byte[cor],branco_intenso
   259                                  write_name:
   260 000001CC E81B00                  		call	cursor
   261 000001CF 8A87[4400]                  	mov     al,[bx+mens2]
   262 000001D3 E82B00                  		call	caracter
   263 000001D6 43                          	inc     bx			;proximo caracter
   264 000001D7 FEC2                    		inc		dl			;avanca a coluna
   265 000001D9 E2F1                        	loop    write_name
   266                                  
   267 000001DB E94CFE                  jmp comeco
   268                                  
   269                                  encerra:
   270 000001DE B400                    	mov  	ah,0   			; set video mode
   271 000001E0 A0[0100]                	mov  	al,[modo_anterior]   	; modo anterior
   272 000001E3 CD10                    	int  	10h
   273 000001E5 B8004C                  	mov 	ax, 4c00h
   274 000001E8 CD21                    	int 	21h
   275                                  ;***************************************************************************
   276                                  ;
   277                                  ;   fun��o cursor
   278                                  ;
   279                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   280                                  cursor:
   281 000001EA 9C                      		pushf
   282 000001EB 50                      		push 		ax
   283 000001EC 53                      		push 		bx
   284 000001ED 51                      		push		cx
   285 000001EE 52                      		push		dx
   286 000001EF 56                      		push		si
   287 000001F0 57                      		push		di
   288 000001F1 55                      		push		bp
   289 000001F2 B402                    		mov     	ah,2
   290 000001F4 B700                    		mov     	bh,0
   291 000001F6 CD10                    		int     	10h
   292 000001F8 5D                      		pop		bp
   293 000001F9 5F                      		pop		di
   294 000001FA 5E                      		pop		si
   295 000001FB 5A                      		pop		dx
   296 000001FC 59                      		pop		cx
   297 000001FD 5B                      		pop		bx
   298 000001FE 58                      		pop		ax
   299 000001FF 9D                      		popf
   300 00000200 C3                      		ret
   301                                  ;_____________________________________________________________________________
   302                                  ;
   303                                  ;   fun��o caracter escrito na posi��o do cursor
   304                                  ;
   305                                  ; al= caracter a ser escrito
   306                                  ; cor definida na variavel cor
   307                                  caracter:
   308 00000201 9C                      		pushf
   309 00000202 50                      		push 		ax
   310 00000203 53                      		push 		bx
   311 00000204 51                      		push		cx
   312 00000205 52                      		push		dx
   313 00000206 56                      		push		si
   314 00000207 57                      		push		di
   315 00000208 55                      		push		bp
   316 00000209 B409                        		mov     	ah,9
   317 0000020B B700                        		mov     	bh,0
   318 0000020D B90100                      		mov     	cx,1
   319 00000210 8A1E[0000]                 		mov     	bl,[cor]
   320 00000214 CD10                        		int     	10h
   321 00000216 5D                      		pop		bp
   322 00000217 5F                      		pop		di
   323 00000218 5E                      		pop		si
   324 00000219 5A                      		pop		dx
   325 0000021A 59                      		pop		cx
   326 0000021B 5B                      		pop		bx
   327 0000021C 58                      		pop		ax
   328 0000021D 9D                      		popf
   329 0000021E C3                      		ret
   330                                  ;_____________________________________________________________________________
   331                                  ;
   332                                  ;   fun��o plot_xy
   333                                  ;
   334                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   335                                  ; cor definida na variavel cor
   336                                  plot_xy:
   337 0000021F 55                      		push		bp
   338 00000220 89E5                    		mov		bp,sp
   339 00000222 9C                      		pushf
   340 00000223 50                      		push 		ax
   341 00000224 53                      		push 		bx
   342 00000225 51                      		push		cx
   343 00000226 52                      		push		dx
   344 00000227 56                      		push		si
   345 00000228 57                      		push		di
   346 00000229 B40C                    	    mov     	ah,0ch
   347 0000022B A0[0000]                	    mov     	al,[cor]
   348 0000022E B700                    	    mov     	bh,0
   349 00000230 BADF01                  	    mov     	dx,479
   350 00000233 2B5604                  		sub		dx,[bp+4]
   351 00000236 8B4E06                  	    mov     	cx,[bp+6]
   352 00000239 CD10                    	    int     	10h
   353 0000023B 5F                      		pop		di
   354 0000023C 5E                      		pop		si
   355 0000023D 5A                      		pop		dx
   356 0000023E 59                      		pop		cx
   357 0000023F 5B                      		pop		bx
   358 00000240 58                      		pop		ax
   359 00000241 9D                      		popf
   360 00000242 5D                      		pop		bp
   361 00000243 C20400                  		ret		4
   362                                  ;_____________________________________________________________________________
   363                                  ;    fun��o circle
   364                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   365                                  ; cor definida na variavel cor
   366                                  circle:
   367 00000246 55                      	push 	bp
   368 00000247 89E5                    	mov	 	bp,sp
   369 00000249 9C                      	pushf                        ;coloca os flags na pilha
   370 0000024A 50                      	push 	ax
   371 0000024B 53                      	push 	bx
   372 0000024C 51                      	push	cx
   373 0000024D 52                      	push	dx
   374 0000024E 56                      	push	si
   375 0000024F 57                      	push	di
   376                                  	
   377 00000250 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   378 00000253 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   379 00000256 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   380                                  	
   381 00000259 89DA                    	mov 	dx,bx	
   382 0000025B 01CA                    	add		dx,cx       ;ponto extremo superior
   383 0000025D 50                      	push    ax			
   384 0000025E 52                      	push	dx
   385 0000025F E8BDFF                  	call plot_xy
   386                                  	
   387 00000262 89DA                    	mov		dx,bx
   388 00000264 29CA                    	sub		dx,cx       ;ponto extremo inferior
   389 00000266 50                      	push    ax			
   390 00000267 52                      	push	dx
   391 00000268 E8B4FF                  	call plot_xy
   392                                  	
   393 0000026B 89C2                    	mov 	dx,ax	
   394 0000026D 01CA                    	add		dx,cx       ;ponto extremo direita
   395 0000026F 52                      	push    dx			
   396 00000270 53                      	push	bx
   397 00000271 E8ABFF                  	call plot_xy
   398                                  	
   399 00000274 89C2                    	mov		dx,ax
   400 00000276 29CA                    	sub		dx,cx       ;ponto extremo esquerda
   401 00000278 52                      	push    dx			
   402 00000279 53                      	push	bx
   403 0000027A E8A2FF                  	call plot_xy
   404                                  		
   405 0000027D 89CF                    	mov		di,cx
   406 0000027F 81EF0100                	sub		di,1	 ;di=r-1
   407 00000283 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   408                                  	
   409                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   410                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   411                                  ;valores positivos para d
   412                                  
   413                                  stay:				;loop
   414 00000286 89FE                    	mov		si,di
   415 00000288 81FE0000                	cmp		si,0
   416 0000028C 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   417 0000028E 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   418 00000290 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   419 00000292 81C60300                	add		si,3
   420 00000296 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   421 00000298 42                      	inc		dx		;incrementa dx
   422 00000299 E90E00                  	jmp		plotar
   423                                  inf:	
   424 0000029C 89D6                    	mov		si,dx
   425 0000029E 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   426 000002A0 D1E6                    	sal		si,1
   427 000002A2 81C60500                	add		si,5
   428 000002A6 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   429 000002A8 42                      	inc		dx		;incrementa x (dx)
   430 000002A9 49                      	dec		cx		;decrementa y (cx)
   431                                  	
   432                                  plotar:	
   433 000002AA 89D6                    	mov		si,dx
   434 000002AC 01C6                    	add		si,ax
   435 000002AE 56                      	push    si			;coloca a abcisa x+xc na pilha
   436 000002AF 89CE                    	mov		si,cx
   437 000002B1 01DE                    	add		si,bx
   438 000002B3 56                      	push    si			;coloca a ordenada y+yc na pilha
   439 000002B4 E868FF                  	call plot_xy		;toma conta do segundo octante
   440 000002B7 89C6                    	mov		si,ax
   441 000002B9 01D6                    	add		si,dx
   442 000002BB 56                      	push    si			;coloca a abcisa xc+x na pilha
   443 000002BC 89DE                    	mov		si,bx
   444 000002BE 29CE                    	sub		si,cx
   445 000002C0 56                      	push    si			;coloca a ordenada yc-y na pilha
   446 000002C1 E85BFF                  	call plot_xy		;toma conta do s�timo octante
   447 000002C4 89C6                    	mov		si,ax
   448 000002C6 01CE                    	add		si,cx
   449 000002C8 56                      	push    si			;coloca a abcisa xc+y na pilha
   450 000002C9 89DE                    	mov		si,bx
   451 000002CB 01D6                    	add		si,dx
   452 000002CD 56                      	push    si			;coloca a ordenada yc+x na pilha
   453 000002CE E84EFF                  	call plot_xy		;toma conta do segundo octante
   454 000002D1 89C6                    	mov		si,ax
   455 000002D3 01CE                    	add		si,cx
   456 000002D5 56                      	push    si			;coloca a abcisa xc+y na pilha
   457 000002D6 89DE                    	mov		si,bx
   458 000002D8 29D6                    	sub		si,dx
   459 000002DA 56                      	push    si			;coloca a ordenada yc-x na pilha
   460 000002DB E841FF                  	call plot_xy		;toma conta do oitavo octante
   461 000002DE 89C6                    	mov		si,ax
   462 000002E0 29D6                    	sub		si,dx
   463 000002E2 56                      	push    si			;coloca a abcisa xc-x na pilha
   464 000002E3 89DE                    	mov		si,bx
   465 000002E5 01CE                    	add		si,cx
   466 000002E7 56                      	push    si			;coloca a ordenada yc+y na pilha
   467 000002E8 E834FF                  	call plot_xy		;toma conta do terceiro octante
   468 000002EB 89C6                    	mov		si,ax
   469 000002ED 29D6                    	sub		si,dx
   470 000002EF 56                      	push    si			;coloca a abcisa xc-x na pilha
   471 000002F0 89DE                    	mov		si,bx
   472 000002F2 29CE                    	sub		si,cx
   473 000002F4 56                      	push    si			;coloca a ordenada yc-y na pilha
   474 000002F5 E827FF                  	call plot_xy		;toma conta do sexto octante
   475 000002F8 89C6                    	mov		si,ax
   476 000002FA 29CE                    	sub		si,cx
   477 000002FC 56                      	push    si			;coloca a abcisa xc-y na pilha
   478 000002FD 89DE                    	mov		si,bx
   479 000002FF 29D6                    	sub		si,dx
   480 00000301 56                      	push    si			;coloca a ordenada yc-x na pilha
   481 00000302 E81AFF                  	call plot_xy		;toma conta do quinto octante
   482 00000305 89C6                    	mov		si,ax
   483 00000307 29CE                    	sub		si,cx
   484 00000309 56                      	push    si			;coloca a abcisa xc-y na pilha
   485 0000030A 89DE                    	mov		si,bx
   486 0000030C 01D6                    	add		si,dx
   487 0000030E 56                      	push    si			;coloca a ordenada yc-x na pilha
   488 0000030F E80DFF                  	call plot_xy		;toma conta do quarto octante
   489                                  	
   490 00000312 39D1                    	cmp		cx,dx
   491 00000314 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   492 00000316 E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   493                                  	
   494                                  	
   495                                  fim_circle:
   496 00000319 5F                      	pop		di
   497 0000031A 5E                      	pop		si
   498 0000031B 5A                      	pop		dx
   499 0000031C 59                      	pop		cx
   500 0000031D 5B                      	pop		bx
   501 0000031E 58                      	pop		ax
   502 0000031F 9D                      	popf
   503 00000320 5D                      	pop		bp
   504 00000321 C20600                  	ret		6
   505                                  ;-----------------------------------------------------------------------------
   506                                  ;    fun��o full_circle
   507                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   508                                  ; cor definida na variavel cor					  
   509                                  full_circle:
   510 00000324 55                      	push 	bp
   511 00000325 89E5                    	mov	 	bp,sp
   512 00000327 9C                      	pushf                        ;coloca os flags na pilha
   513 00000328 50                      	push 	ax
   514 00000329 53                      	push 	bx
   515 0000032A 51                      	push	cx
   516 0000032B 52                      	push	dx
   517 0000032C 56                      	push	si
   518 0000032D 57                      	push	di
   519                                  
   520 0000032E 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   521 00000331 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   522 00000334 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   523                                  	
   524 00000337 89DE                    	mov		si,bx
   525 00000339 29CE                    	sub		si,cx
   526 0000033B 50                      	push    ax			;coloca xc na pilha			
   527 0000033C 56                      	push	si			;coloca yc-r na pilha
   528 0000033D 89DE                    	mov		si,bx
   529 0000033F 01CE                    	add		si,cx
   530 00000341 50                      	push	ax		;coloca xc na pilha
   531 00000342 56                      	push	si		;coloca yc+r na pilha
   532 00000343 E89B00                  	call line
   533                                  	
   534                                  		
   535 00000346 89CF                    	mov		di,cx
   536 00000348 81EF0100                	sub		di,1	 ;di=r-1
   537 0000034C BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   538                                  	
   539                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   540                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   541                                  ;valores positivos para d
   542                                  
   543                                  stay_full:				;loop
   544 0000034F 89FE                    	mov		si,di
   545 00000351 81FE0000                	cmp		si,0
   546 00000355 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   547 00000357 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   548 00000359 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   549 0000035B 81C60300                	add		si,3
   550 0000035F 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   551 00000361 42                      	inc		dx		;incrementa dx
   552 00000362 E90E00                  	jmp		plotar_full
   553                                  inf_full:	
   554 00000365 89D6                    	mov		si,dx
   555 00000367 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   556 00000369 D1E6                    	sal		si,1
   557 0000036B 81C60500                	add		si,5
   558 0000036F 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   559 00000371 42                      	inc		dx		;incrementa x (dx)
   560 00000372 49                      	dec		cx		;decrementa y (cx)
   561                                  	
   562                                  plotar_full:	
   563 00000373 89C6                    	mov		si,ax
   564 00000375 01CE                    	add		si,cx
   565 00000377 56                      	push	si		;coloca a abcisa y+xc na pilha			
   566 00000378 89DE                    	mov		si,bx
   567 0000037A 29D6                    	sub		si,dx
   568 0000037C 56                      	push    si		;coloca a ordenada yc-x na pilha
   569 0000037D 89C6                    	mov		si,ax
   570 0000037F 01CE                    	add		si,cx
   571 00000381 56                      	push	si		;coloca a abcisa y+xc na pilha	
   572 00000382 89DE                    	mov		si,bx
   573 00000384 01D6                    	add		si,dx
   574 00000386 56                      	push    si		;coloca a ordenada yc+x na pilha	
   575 00000387 E85700                  	call 	line
   576                                  	
   577 0000038A 89C6                    	mov		si,ax
   578 0000038C 01D6                    	add		si,dx
   579 0000038E 56                      	push	si		;coloca a abcisa xc+x na pilha			
   580 0000038F 89DE                    	mov		si,bx
   581 00000391 29CE                    	sub		si,cx
   582 00000393 56                      	push    si		;coloca a ordenada yc-y na pilha
   583 00000394 89C6                    	mov		si,ax
   584 00000396 01D6                    	add		si,dx
   585 00000398 56                      	push	si		;coloca a abcisa xc+x na pilha	
   586 00000399 89DE                    	mov		si,bx
   587 0000039B 01CE                    	add		si,cx
   588 0000039D 56                      	push    si		;coloca a ordenada yc+y na pilha	
   589 0000039E E84000                  	call	line
   590                                  	
   591 000003A1 89C6                    	mov		si,ax
   592 000003A3 29D6                    	sub		si,dx
   593 000003A5 56                      	push	si		;coloca a abcisa xc-x na pilha			
   594 000003A6 89DE                    	mov		si,bx
   595 000003A8 29CE                    	sub		si,cx
   596 000003AA 56                      	push    si		;coloca a ordenada yc-y na pilha
   597 000003AB 89C6                    	mov		si,ax
   598 000003AD 29D6                    	sub		si,dx
   599 000003AF 56                      	push	si		;coloca a abcisa xc-x na pilha	
   600 000003B0 89DE                    	mov		si,bx
   601 000003B2 01CE                    	add		si,cx
   602 000003B4 56                      	push    si		;coloca a ordenada yc+y na pilha	
   603 000003B5 E82900                  	call	line
   604                                  	
   605 000003B8 89C6                    	mov		si,ax
   606 000003BA 29CE                    	sub		si,cx
   607 000003BC 56                      	push	si		;coloca a abcisa xc-y na pilha			
   608 000003BD 89DE                    	mov		si,bx
   609 000003BF 29D6                    	sub		si,dx
   610 000003C1 56                      	push    si		;coloca a ordenada yc-x na pilha
   611 000003C2 89C6                    	mov		si,ax
   612 000003C4 29CE                    	sub		si,cx
   613 000003C6 56                      	push	si		;coloca a abcisa xc-y na pilha	
   614 000003C7 89DE                    	mov		si,bx
   615 000003C9 01D6                    	add		si,dx
   616 000003CB 56                      	push    si		;coloca a ordenada yc+x na pilha	
   617 000003CC E81200                  	call	line
   618                                  	
   619 000003CF 39D1                    	cmp		cx,dx
   620 000003D1 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   621 000003D3 E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   622                                  	
   623                                  	
   624                                  fim_full_circle:
   625 000003D6 5F                      	pop		di
   626 000003D7 5E                      	pop		si
   627 000003D8 5A                      	pop		dx
   628 000003D9 59                      	pop		cx
   629 000003DA 5B                      	pop		bx
   630 000003DB 58                      	pop		ax
   631 000003DC 9D                      	popf
   632 000003DD 5D                      	pop		bp
   633 000003DE C20600                  	ret		6
   634                                  ;-----------------------------------------------------------------------------
   635                                  ;
   636                                  ;   fun��o line
   637                                  ;
   638                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   639                                  line:
   640 000003E1 55                      		push		bp
   641 000003E2 89E5                    		mov		bp,sp
   642 000003E4 9C                      		pushf                        ;coloca os flags na pilha
   643 000003E5 50                      		push 		ax
   644 000003E6 53                      		push 		bx
   645 000003E7 51                      		push		cx
   646 000003E8 52                      		push		dx
   647 000003E9 56                      		push		si
   648 000003EA 57                      		push		di
   649 000003EB 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   650 000003EE 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   651 000003F1 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   652 000003F4 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   653 000003F7 39C8                    		cmp		ax,cx
   654 000003F9 7408                    		je		line2
   655 000003FB 721C                    		jb		line1
   656 000003FD 91                      		xchg		ax,cx
   657 000003FE 87DA                    		xchg		bx,dx
   658 00000400 E91600                  		jmp		line1
   659                                  line2:		; deltax=0
   660 00000403 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   661 00000405 7202                    		jb		line3
   662 00000407 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   663                                  line3:	; dx > bx
   664 00000409 50                      		push		ax
   665 0000040A 53                      		push		bx
   666 0000040B E811FE                  		call 		plot_xy
   667 0000040E 39D3                    		cmp		bx,dx
   668 00000410 7503                    		jne		line31
   669 00000412 E9C600                  		jmp		fim_line
   670 00000415 43                      line31:		inc		bx
   671 00000416 E9F0FF                  		jmp		line3
   672                                  ;deltax <>0
   673                                  line1:
   674                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   675                                  	; cx > ax
   676 00000419 51                      		push		cx
   677 0000041A 29C1                    		sub		cx,ax
   678 0000041C 890E[0600]              		mov		[deltax],cx
   679 00000420 59                      		pop		cx
   680 00000421 52                      		push		dx
   681 00000422 29DA                    		sub		dx,bx
   682 00000424 7702                    		ja		line32
   683 00000426 F7DA                    		neg		dx
   684                                  line32:		
   685 00000428 8916[0800]              		mov		[deltay],dx
   686 0000042C 5A                      		pop		dx
   687                                  
   688 0000042D 50                      		push		ax
   689 0000042E A1[0600]                		mov		ax,[deltax]
   690 00000431 3B06[0800]              		cmp		ax,[deltay]
   691 00000435 58                      		pop		ax
   692 00000436 724D                    		jb		line5
   693                                  
   694                                  	; cx > ax e deltax>deltay
   695 00000438 51                      		push		cx
   696 00000439 29C1                    		sub		cx,ax
   697 0000043B 890E[0600]              		mov		[deltax],cx
   698 0000043F 59                      		pop		cx
   699 00000440 52                      		push		dx
   700 00000441 29DA                    		sub		dx,bx
   701 00000443 8916[0800]              		mov		[deltay],dx
   702 00000447 5A                      		pop		dx
   703                                  
   704 00000448 89C6                    		mov		si,ax
   705                                  line4:
   706 0000044A 50                      		push		ax
   707 0000044B 52                      		push		dx
   708 0000044C 56                      		push		si
   709 0000044D 29C6                    		sub		si,ax	;(x-x1)
   710 0000044F A1[0800]                		mov		ax,[deltay]
   711 00000452 F7EE                    		imul		si
   712 00000454 8B36[0600]              		mov		si,[deltax]		;arredondar
   713 00000458 D1EE                    		shr		si,1
   714                                  ; se numerador (DX)>0 soma se <0 subtrai
   715 0000045A 81FA0000                		cmp		dx,0
   716 0000045E 7C09                    		jl		ar1
   717 00000460 01F0                    		add		ax,si
   718 00000462 81D20000                		adc		dx,0
   719 00000466 E90600                  		jmp		arc1
   720 00000469 29F0                    ar1:		sub		ax,si
   721 0000046B 81DA0000                		sbb		dx,0
   722                                  arc1:
   723 0000046F F73E[0600]              		idiv		word [deltax]
   724 00000473 01D8                    		add		ax,bx
   725 00000475 5E                      		pop		si
   726 00000476 56                      		push		si
   727 00000477 50                      		push		ax
   728 00000478 E8A4FD                  		call		plot_xy
   729 0000047B 5A                      		pop		dx
   730 0000047C 58                      		pop		ax
   731 0000047D 39CE                    		cmp		si,cx
   732 0000047F 745A                    		je		fim_line
   733 00000481 46                      		inc		si
   734 00000482 E9C5FF                  		jmp		line4
   735                                  
   736 00000485 39D3                    line5:		cmp		bx,dx
   737 00000487 7203                    		jb 		line7
   738 00000489 91                      		xchg		ax,cx
   739 0000048A 87DA                    		xchg		bx,dx
   740                                  line7:
   741 0000048C 51                      		push		cx
   742 0000048D 29C1                    		sub		cx,ax
   743 0000048F 890E[0600]              		mov		[deltax],cx
   744 00000493 59                      		pop		cx
   745 00000494 52                      		push		dx
   746 00000495 29DA                    		sub		dx,bx
   747 00000497 8916[0800]              		mov		[deltay],dx
   748 0000049B 5A                      		pop		dx
   749                                  
   750                                  
   751                                  
   752 0000049C 89DE                    		mov		si,bx
   753                                  line6:
   754 0000049E 52                      		push		dx
   755 0000049F 56                      		push		si
   756 000004A0 50                      		push		ax
   757 000004A1 29DE                    		sub		si,bx	;(y-y1)
   758 000004A3 A1[0600]                		mov		ax,[deltax]
   759 000004A6 F7EE                    		imul		si
   760 000004A8 8B36[0800]              		mov		si,[deltay]		;arredondar
   761 000004AC D1EE                    		shr		si,1
   762                                  ; se numerador (DX)>0 soma se <0 subtrai
   763 000004AE 81FA0000                		cmp		dx,0
   764 000004B2 7C09                    		jl		ar2
   765 000004B4 01F0                    		add		ax,si
   766 000004B6 81D20000                		adc		dx,0
   767 000004BA E90600                  		jmp		arc2
   768 000004BD 29F0                    ar2:		sub		ax,si
   769 000004BF 81DA0000                		sbb		dx,0
   770                                  arc2:
   771 000004C3 F73E[0800]              		idiv		word [deltay]
   772 000004C7 89C7                    		mov		di,ax
   773 000004C9 58                      		pop		ax
   774 000004CA 01C7                    		add		di,ax
   775 000004CC 5E                      		pop		si
   776 000004CD 57                      		push		di
   777 000004CE 56                      		push		si
   778 000004CF E84DFD                  		call		plot_xy
   779 000004D2 5A                      		pop		dx
   780 000004D3 39D6                    		cmp		si,dx
   781 000004D5 7404                    		je		fim_line
   782 000004D7 46                      		inc		si
   783 000004D8 E9C3FF                  		jmp		line6
   784                                  
   785                                  fim_line:
   786 000004DB 5F                      		pop		di
   787 000004DC 5E                      		pop		si
   788 000004DD 5A                      		pop		dx
   789 000004DE 59                      		pop		cx
   790 000004DF 5B                      		pop		bx
   791 000004E0 58                      		pop		ax
   792 000004E1 9D                      		popf
   793 000004E2 5D                      		pop		bp
   794 000004E3 C20800                  		ret		8
   795                                  
   796                                  
   797                                  
   798                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   799 000004E6 51                          push cx
   800 000004E7 8B0E[5C00]                  mov cx, word [velocidade] ; Carrega “velocidade” em cx (contador para loop)
   801                                  del2:
   802 000004EB 51                          push cx ; Coloca cx na pilha para usa-lo em outro loop
   803 000004EC B90005                      mov cx, 0500h ; Teste modificando este valor
   804                                  del1:
   805 000004EF E2FE                        loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   806 000004F1 59                          pop cx ; Recupera cx da pilha
   807 000004F2 E2F7                        loop del2 ; No loop del2, cx é decrementado até que seja zero
   808 000004F4 59                          pop cx
   809 000004F5 C3                          ret
   810                                  
   811                                  ;*******************************************************************
   812                                  segment data
   813                                  
   814 00000000 0F                      cor		db		branco_intenso
   815                                  
   816                                  ;	I R G B COR
   817                                  ;	0 0 0 0 preto
   818                                  ;	0 0 0 1 azul
   819                                  ;	0 0 1 0 verde
   820                                  ;	0 0 1 1 cyan
   821                                  ;	0 1 0 0 vermelho
   822                                  ;	0 1 0 1 magenta
   823                                  ;	0 1 1 0 marrom
   824                                  ;	0 1 1 1 branco
   825                                  ;	1 0 0 0 cinza
   826                                  ;	1 0 0 1 azul claro
   827                                  ;	1 0 1 0 verde claro
   828                                  ;	1 0 1 1 cyan claro
   829                                  ;	1 1 0 0 rosa
   830                                  ;	1 1 0 1 magenta claro
   831                                  ;	1 1 1 0 amarelo
   832                                  ;	1 1 1 1 branco intenso
   833                                  
   834                                  preto		equ		0
   835                                  azul		equ		1
   836                                  verde		equ		2
   837                                  cyan		equ		3
   838                                  vermelho	equ		4
   839                                  magenta		equ		5
   840                                  marrom		equ		6
   841                                  branco		equ		7
   842                                  cinza		equ		8
   843                                  azul_claro	equ		9
   844                                  verde_claro	equ		10
   845                                  cyan_claro	equ		11
   846                                  rosa		equ		12
   847                                  magenta_claro	equ		13
   848                                  amarelo		equ		14
   849                                  branco_intenso	equ		15
   850                                  
   851 00000001 00                      modo_anterior	db		0
   852 00000002 0000                    linha   	dw  		0
   853 00000004 0000                    coluna  	dw  		0
   854 00000006 0000                    deltax		dw		0
   855 00000008 0000                    deltay		dw		0	
   856 0000000A 45786572636963696F-     mens1    	db  'Exercicio de Programacao de Sistemas Embarcados 1 - 2023/2'
   857 00000013 2064652050726F6772-
   858 0000001C 616D6163616F206465-
   859 00000025 2053697374656D6173-
   860 0000002E 20456D626172636164-
   861 00000037 6F732031202D203230-
   862 00000040 32332F32           
   863 00000044 417274687572204261-     mens2		db	'Arthur Bandeira Salvador'
   864 0000004D 6E6465697261205361-
   865 00000056 6C7661646F72       
   866                                  
   867 0000005C 7800                    velocidade	dw	120
   868 0000005E 0A00                    vx			dw	10
   869 00000060 0A00                    vy			dw	10
   870 00000062 0A00                    vatual 		dw	10
   871 00000064 D600                    raqi		dw	214
   872 00000066 FE00                    raqf		dw	254
   873                                  ;*************************************************************************
   874                                  segment stack stack
   875 00000000 <res 00000200>              		resb 		512
   876                                  stacktop:
   877                                  
