     1                                  ; NOME: ARTHUR BANDEIRA SALVADOR
     2                                  ; TURMA: 06.1 N
     3                                  ;
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                    		mov 		ax,data
     8 00000003 8ED8                        		mov 		ds,ax
     9 00000005 B8[0000]                    		mov 		ax,stack
    10 00000008 8ED0                        		mov 		ss,ax
    11 0000000A BC[0002]                    		mov 		sp,stacktop
    12                                  
    13                                  
    14                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    15 0000000D B40F                                mov  		ah,0Fh
    16 0000000F CD10                        		int  		10h
    17 00000011 A2[0100]                    		mov  		[modo_anterior],al   
    18                                  
    19                                  
    20                                  ; alterar modo de video para gr�fico 640x480 16 cores
    21 00000014 B012                        	mov     	al,12h
    22 00000016 B400                       		mov     	ah,0
    23 00000018 CD10                        	int     	10h
    24                                  
    25                                  
    26                                  
    27                                  ;***************************************************;
    28                                  ;			   definições pré código				;
    29                                  ;***************************************************;
    30                                  
    31                                  ;limpa si, di, e define onde a bolinha começa
    32 0000001A 31F6                    		xor si, si
    33 0000001C 31FF                    		xor di, di
    34 0000001E BE3F01                  		mov si, 319
    35 00000021 BFF000                  		mov di, 240
    36 00000024 B950C3                  		mov cx, 50000 ;define a quantidade de loops completos (tempo de jogo)
    37 00000027 E8A802                  		call set_caracter1
    38                                  	desenha_cabecalho:
    39 0000002A C606[0000]0F            		mov		byte[cor],branco_intenso	;borda cabeçalho (x1, y1, x2, y2)
    40 0000002F B80000                  		mov		ax,0
    41 00000032 50                      		push		ax
    42 00000033 B8AF01                  		mov		ax,431
    43 00000036 50                      		push		ax
    44 00000037 B88002                  		mov		ax,640
    45 0000003A 50                      		push		ax
    46 0000003B B8AF01                  		mov		ax,431
    47 0000003E 50                      		push		ax
    48 0000003F E86B05                  		call line
    49 00000042 58                      		pop ax
    50 00000043 58                      		pop ax
    51 00000044 58                      		pop ax
    52                                  
    53 00000045 E8F302                  		call desenha_lateral	; desenha as bordas laterais da tela
    54                                  main:
    55                                  	
    56 00000048 C606[0000]0F            	mov		byte[cor],branco_intenso	;raquete (x1, y1, x2, y2)
    57 0000004D B85702                  	mov		ax,599
    58 00000050 50                      	push		ax
    59 00000051 A1[8B00]                	mov		ax,word[raqi]
    60 00000054 50                      	push		ax
    61 00000055 B85702                  	mov		ax,599
    62 00000058 50                      	push		ax
    63 00000059 A1[8D00]                	mov		ax,word[raqf]
    64 0000005C 50                      	push		ax
    65 0000005D E84D05                  	call line
    66 00000060 58                      	pop ax
    67 00000061 58                      	pop ax
    68 00000062 58                      	pop ax
    69                                  
    70                                  	;circulos vermelhos
    71 00000063 C606[0000]04            	mov     byte[cor],vermelho  
    72 00000068 89F0                    	mov     ax, si
    73 0000006A 50                      	push        ax
    74 0000006B 89F8                    	mov     ax, di
    75 0000006D 50                      	push        ax
    76 0000006E B80A00                  	mov     ax,10
    77 00000071 50                      	push        ax
    78 00000072 E87B04                  	call full_circle	
    79 00000075 B90100                  	mov cx, 1
    80 00000078 51                      	push cx
    81 00000079 BA0200                  	mov dx, 2
    82 0000007C 52                      	push dx
    83 0000007D B000                    	mov al, 0 
    84 0000007F B486                    	mov ah, 86h
    85 00000081 CD15                    	int 15h		;função delay
    86 00000083 59                      	pop cx
    87 00000084 5A                      	pop dx
    88 00000085 58                      	pop ax
    89 00000086 58                      	pop ax
    90 00000087 58                      	pop ax
    91                                  
    92                                  	;apaga circulos (circulos pretos)
    93 00000088 C606[0000]00            	mov     byte[cor],preto
    94 0000008D 89F0                    	mov     ax, si
    95 0000008F 50                      	push        ax
    96 00000090 89F8                    	mov     ax, di
    97 00000092 50                      	push        ax
    98 00000093 B80A00                  	mov     ax,10
    99 00000096 50                      	push        ax
   100 00000097 E85604                  	call full_circle
   101 0000009A 58                      	pop ax
   102 0000009B 58                      	pop ax
   103 0000009C 58                      	pop ax		
   104                                  
   105 0000009D 0336[8200]              	add si, word[vx]
   106 000000A1 033E[8400]              	add di, word[vy]
   107                                  
   108 000000A5 81FF1400                	cmp di, 20
   109 000000A9 7E1D                    	jle bate_baixo
   110                                  volta1:
   111 000000AB 81FE6C02                	cmp si, 620
   112 000000AF 7D22                    	jge bate_direita 
   113                                  volta2:
   114 000000B1 81FF9501                	cmp di, 405
   115 000000B5 7D2E                    	jge bate_cima
   116                                  volta3:
   117 000000B7 81FE1400                	cmp si, 20
   118 000000BB 7E37                    	jle	bate_esquerda
   119                                  volta4:
   120 000000BD B401                    	mov ah, 01h
   121 000000BF CD16                    	int 16h
   122 000000C1 7563                    	jnz tecla_clicada
   123 000000C3 E83900                  	call bate_raquete
   124                                  checagem:
   125 000000C6 E280                    loop main
   126                                  
   127                                  bate_baixo:
   128 000000C8 A1[8600]                	mov ax, word[vatual]
   129 000000CB 50                      	push ax
   130 000000CC A3[8400]                	mov word[vy], ax
   131 000000CF 58                      	pop ax  
   132 000000D0 E9D8FF                  jmp volta1
   133                                  
   134                                  bate_direita:
   135 000000D3 B8FFFF                  	mov ax, -1
   136 000000D6 50                      	push ax
   137 000000D7 F726[8600]              	mul word[vatual]
   138 000000DB A3[8200]                	mov word[vx], ax
   139 000000DE 58                      	pop ax
   140 000000DF E8AF01                  	call ponto_comp    
   141 000000E2 E9CCFF                  jmp volta2
   142                                  
   143                                  bate_cima:
   144 000000E5 B8FFFF                  	mov ax, -1
   145 000000E8 50                      	push ax
   146 000000E9 F726[8600]              	mul word[vatual]
   147 000000ED A3[8400]                	mov word[vy], ax
   148 000000F0 58                      	pop ax
   149 000000F1 E9C3FF                  jmp volta3
   150                                  
   151                                  bate_esquerda:
   152 000000F4 A1[8600]                	mov ax, word[vatual]
   153 000000F7 50                      	push ax
   154 000000F8 A3[8200]                	mov word[vx], ax
   155 000000FB 58                      	pop ax
   156 000000FC E9BEFF                  jmp volta4
   157                                  
   158                                  bate_raquete:
   159 000000FF 81FE4D02                	cmp si, 589
   160 00000103 7CC1                    	jl checagem	
   161 00000105 3B3E[8B00]              	cmp di, word[raqi]	;vê se x é menor
   162 00000109 7CBB                    	jl checagem	
   163 0000010B 3B3E[8D00]              	cmp di, word[raqf]	;vê se x é maior
   164 0000010F 7FB5                    	jg checagem
   165 00000111 B8FFFF                  	mov ax, -1		;passou na checagem, inverte vx
   166 00000114 50                      	push ax
   167 00000115 F726[8600]              	mul word[vatual]
   168 00000119 A3[8200]                	mov word[vx], ax 
   169 0000011C 58                      	pop ax
   170 0000011D E83001                  	call ponto_player
   171 00000120 E9A3FF                  jmp checagem
   172                                  
   173                                  move_main:
   174 00000123 E922FF                  	jmp main
   175                                  
   176                                  tecla_clicada:
   177 00000126 B408                    	mov ah, 08h
   178 00000128 CD21                    	int 21h
   179 0000012A 3C73                    	cmp al, 's' ; 's'
   180 0000012C 747A                    	jz move_encerra
   181 0000012E 3C63                    	cmp al, 'c' ; 'c'
   182 00000130 740F                    	jz raquete_cima
   183 00000132 3C62                    	cmp al, 'b'	; 'b'
   184 00000134 743D                    	jz raquete_baixo
   185 00000136 3C6D                    	cmp al, 'm' ; 'm'
   186 00000138 7474                    	jz reduz_velo
   187 0000013A 3C70                    	cmp al, 'p' ; 'p'
   188 0000013C 746D                    	jz move_aumenta_velo
   189 0000013E E907FF                  jmp main
   190                                  
   191                                  raquete_cima:
   192 00000141 813E[8D00]9F01          	cmp word[raqf], 415
   193 00000147 7DDA                    	jge move_main
   194 00000149 C606[0000]00            	mov		byte[cor],preto		;apaga raquete antiga;
   195 0000014E B85702                  	mov		ax,599
   196 00000151 50                      	push		ax
   197 00000152 A1[8B00]                	mov		ax,word[raqi]
   198 00000155 50                      	push		ax
   199 00000156 B85702                  	mov		ax,599
   200 00000159 50                      	push		ax
   201 0000015A A1[8D00]                	mov		ax,word[raqf]
   202 0000015D 50                      	push		ax
   203 0000015E E84C04                  	call line
   204 00000161 58                      	pop ax
   205 00000162 58                      	pop ax
   206 00000163 58                      	pop ax
   207 00000164 8106[8B00]0F00          	add word[raqi], 15		;aumenta raqi e raqf;
   208 0000016A 8106[8D00]0F00          	add word[raqf], 15
   209 00000170 E9D5FE                  jmp main
   210                                  
   211                                  raquete_baixo:
   212 00000173 813E[8B00]0F00          	cmp word[raqi], 15
   213 00000179 7EA8                    	jle move_main
   214 0000017B C606[0000]00            	mov		byte[cor],preto		;apaga raquete antiga;
   215 00000180 B85702                  	mov		ax,599
   216 00000183 50                      	push		ax
   217 00000184 A1[8B00]                	mov		ax,word[raqi]
   218 00000187 50                      	push		ax
   219 00000188 B85702                  	mov		ax,599
   220 0000018B 50                      	push		ax
   221 0000018C A1[8D00]                	mov		ax,word[raqf]
   222 0000018F 50                      	push		ax
   223 00000190 E81A04                  	call line
   224 00000193 58                      	pop ax
   225 00000194 58                      	pop ax
   226 00000195 58                      	pop ax
   227 00000196 8106[8B00]F1FF          	add word[raqi], -15		;aumenta raqi e raqf;
   228 0000019C 8106[8D00]F1FF          	add word[raqf], -15
   229 000001A2 E9A3FE                  jmp main
   230                                  
   231                                  move_main2:
   232 000001A5 E9A0FE                  	jmp main
   233                                  move_encerra:
   234 000001A8 E9FF01                  	jmp encerra
   235                                  move_aumenta_velo:
   236 000001AB E92D00                  	jmp aumenta_velo
   237                                  
   238                                  reduz_velo:					;função chamada com 'm'
   239 000001AE 813E[8600]0400          	cmp word[vatual], 4
   240 000001B4 7EEF                    	jle move_main2
   241 000001B6 8106[8600]FCFF          	add word[vatual], -4
   242 000001BC 8006[8800]FF            	add byte[v_printa_int], -1
   243 000001C1 E84D01                  	call altera_v_printa
   244                                  	
   245 000001C4 813E[8200]0000          	cmp word[vx], 0
   246 000001CA 7C3C                    	jl reduz_vx_neg
   247 000001CC 7F43                    	jg reduz_vx_pos
   248                                  vy_reduz:					;tag para os casos de mudança
   249 000001CE 813E[8400]0000          	cmp word[vy], 0
   250 000001D4 7C56                    	jl reduz_vy_neg
   251 000001D6 7F5D                    	jg reduz_vy_pos
   252 000001D8 E948FF                  	jmp move_main
   253                                  
   254                                  aumenta_velo:				;função chamada com 'p'
   255 000001DB 813E[8600]0C00          	cmp word[vatual], 12
   256 000001E1 7DC2                    	jge move_main2
   257 000001E3 8106[8600]0400          	add word[vatual], 4
   258 000001E9 8006[8800]01            	add byte[v_printa_int], 1
   259 000001EE E82001                  	call altera_v_printa
   260                                  	
   261 000001F1 813E[8200]0000          	cmp word[vx], 0
   262 000001F7 7C21                    	jl aumenta_vx_neg
   263 000001F9 7F28                    	jg aumenta_vx_pos
   264                                  vy_aumenta:					;tag para os casos de mudança
   265 000001FB 813E[8400]0000          	cmp word[vy], 0
   266 00000201 7C3B                    	jl aumenta_vy_neg
   267 00000203 7F42                    	jg aumenta_vy_pos
   268 00000205 E91BFF                  	jmp move_main
   269                                  
   270                                  reduz_vx_neg:			;casos de mudança de velocidade
   271 00000208 8106[8200]0400          	add word[vx], 4
   272 0000020E E9BDFF                  	jmp vy_reduz
   273                                  reduz_vx_pos:
   274 00000211 8106[8200]FCFF          	add word[vx], -4
   275 00000217 E9B4FF                  	jmp vy_reduz
   276                                  aumenta_vx_neg:
   277 0000021A 8106[8200]FCFF          	add word[vx], -4
   278 00000220 E9D8FF                  	jmp vy_aumenta
   279                                  aumenta_vx_pos:
   280 00000223 8106[8200]0400          	add word[vx], 4
   281 00000229 E9CFFF                  	jmp vy_aumenta
   282                                  reduz_vy_neg:
   283 0000022C 8106[8400]0400          	add word[vy], 4
   284 00000232 E9EEFE                  	jmp move_main
   285                                  reduz_vy_pos:
   286 00000235 8106[8400]FCFF          	add word[vy], -4
   287 0000023B E9E5FE                  	jmp move_main
   288                                  aumenta_vy_neg:
   289 0000023E 8106[8400]FCFF          	add word[vy], -4
   290 00000244 E9DCFE                  	jmp move_main
   291                                  aumenta_vy_pos:
   292 00000247 8106[8400]0400          	add word[vy], 4
   293 0000024D E9D3FE                  	jmp move_main
   294                                  
   295                                  
   296                                  ponto_player:
   297 00000250 31C0                    	xor ax, ax
   298 00000252 31D2                    	xor dx, dx
   299 00000254 8106[8F00]0100          	add word[ponto_play], 1
   300 0000025A A1[8F00]                	mov ax, word[ponto_play]
   301 0000025D 50                      	push ax
   302 0000025E B90A00                  	mov cx, 10
   303 00000261 51                      	push cx
   304 00000262 F7F1                    	div cx
   305 00000264 80C230                  	add dl, '0'
   306 00000267 8816[9400]              	mov byte[pnt_play_str + 1], dl
   307 0000026B 0430                    	add al, '0'
   308 0000026D A2[9300]                	mov byte[pnt_play_str], al
   309 00000270 59                      	pop cx
   310 00000271 58                      	pop ax
   311                                  set_ponto_player:
   312 00000272 B90200                  	mov     	cx,2			;n�mero de caracteres
   313 00000275 BB0000                      mov     	bx,0
   314 00000278 B601                        mov     	dh,1			;linha 0-29
   315 0000027A B219                        mov     	dl,25			;coluna 0-79
   316 0000027C C606[0000]0F            	mov		byte[cor],branco_intenso
   317                                  print_player:
   318 00000281 E83201                  		call	cursor
   319 00000284 8A87[9300]                  	mov     al,[bx+pnt_play_str]
   320 00000288 E84201                  		call	caracter
   321 0000028B 43                          	inc     bx			;proximo caracter
   322 0000028C FEC2                    		inc		dl			;avanca a coluna
   323 0000028E E2F1                        	loop    print_player
   324 00000290 C3                      	ret
   325                                  
   326                                  ponto_comp:
   327 00000291 31C0                    	xor ax, ax
   328 00000293 31D2                    	xor dx, dx
   329 00000295 8106[9100]0100          	add word[ponto_pc], 1
   330 0000029B A1[9100]                	mov ax, word[ponto_pc]
   331 0000029E 50                      	push ax
   332 0000029F B90A00                  	mov cx, 10
   333 000002A2 51                      	push cx
   334 000002A3 F7F1                    	div cx
   335 000002A5 80C230                  	add dl, '0'
   336 000002A8 8816[9600]              	mov byte[pnt_pc_str + 1], dl
   337 000002AC 0430                    	add al, '0'
   338 000002AE A2[9500]                	mov byte[pnt_pc_str], al
   339 000002B1 59                      	pop cx
   340 000002B2 58                      	pop ax
   341                                  set_ponto_comp:
   342 000002B3 B90200                  	mov     	cx,2			;n�mero de caracteres
   343 000002B6 BB0000                      mov     	bx,0
   344 000002B9 B601                        mov     	dh,1			;linha 0-29
   345 000002BB B21E                        mov     	dl,30			;coluna 0-79
   346 000002BD C606[0000]0F            	mov		byte[cor],branco_intenso
   347                                  print_comp:
   348 000002C2 E8F100                  		call	cursor
   349 000002C5 8A87[9500]                  	mov     al,[bx+pnt_pc_str]
   350 000002C9 E80101                  		call	caracter
   351 000002CC 43                          	inc     bx			;proximo caracter
   352 000002CD FEC2                    		inc		dl			;avanca a coluna
   353 000002CF E2F1                        	loop    print_comp
   354 000002D1 C3                      	ret
   355                                  
   356                                  set_caracter1:			;primeira linha do cabeçalho
   357 000002D2 B93A00                      mov     	cx,58			;n�mero de caracteres
   358 000002D5 BB0000                      mov     	bx,0
   359 000002D8 B600                        mov     	dh,0			;linha 0-29
   360 000002DA B200                        mov     	dl,0			;coluna 0-79
   361 000002DC C606[0000]0F            	mov		byte[cor],branco_intenso
   362                                  l4:
   363 000002E1 E8D200                  		call	cursor
   364 000002E4 8A87[0A00]                  	mov     al,[bx+mens1]
   365 000002E8 E8E200                  		call	caracter
   366 000002EB 43                          	inc     bx			;proximo caracter
   367 000002EC FEC2                    		inc		dl			;avanca a coluna
   368 000002EE E2F1                        	loop    l4
   369                                  set_caracter2:			;segunda linha do cabeçalho
   370 000002F0 B93E00                  	mov     	cx,62			;n�mero de caracteres
   371 000002F3 BB0000                      mov     	bx,0
   372 000002F6 B601                        mov     	dh,1			;linha 0-29
   373 000002F8 B200                        mov     	dl,0			;coluna 0-79
   374 000002FA C606[0000]0F            	mov		byte[cor],branco_intenso
   375                                  write_name:
   376 000002FF E8B400                  		call	cursor
   377 00000302 8A87[4400]                  	mov     al,[bx+mens2]
   378 00000306 E8C400                  		call	caracter
   379 00000309 43                          	inc     bx			;proximo caracter
   380 0000030A FEC2                    		inc		dl			;avanca a coluna
   381 0000030C E2F1                        	loop    write_name
   382                                  
   383 0000030E E919FD                  jmp desenha_cabecalho
   384                                  
   385                                  altera_v_printa:	; usa a variável inteira para printar a velocidade da bola
   386 00000311 B80000                  	mov ax, 0
   387 00000314 A0[8800]                	mov al, byte[v_printa_int]
   388 00000317 0430                    	add al, 30h
   389 00000319 A2[8900]                	mov byte[v_printa_str], al
   390                                  
   391 0000031C B90100                  	mov     	cx,1			;n�mero de caracteres
   392 0000031F BB0000                      mov     	bx,0
   393 00000322 B601                        mov     	dh,1			;linha 0-29
   394 00000324 B23A                        mov     	dl,58			;coluna 0-79
   395 00000326 C606[0000]0F            	mov		byte[cor],branco_intenso
   396                                  print_v:
   397 0000032B E88800                  		call	cursor
   398 0000032E 8A87[8900]                  	mov     al,[bx+v_printa_str]
   399 00000332 E89800                  		call	caracter
   400 00000335 43                          	inc     bx			;proximo caracter
   401 00000336 FEC2                    		inc		dl			;avanca a coluna
   402 00000338 E2F1                        	loop    print_v
   403 0000033A C3                      	ret
   404                                  
   405                                  desenha_lateral:
   406 0000033B C606[0000]0F            	mov		byte[cor],branco_intenso	;borda baixo (x1, y1, x2, y2)
   407 00000340 B80000                  	mov		ax,0
   408 00000343 50                      	push		ax
   409 00000344 B80000                  	mov		ax,0
   410 00000347 50                      	push		ax
   411 00000348 B87F02                  	mov		ax,639
   412 0000034B 50                      	push		ax
   413 0000034C B80000                  	mov		ax,0
   414 0000034F 50                      	push		ax
   415 00000350 E85A02                  	call line
   416 00000353 58                      	pop ax
   417 00000354 58                      	pop ax
   418 00000355 58                      	pop ax
   419                                  	
   420 00000356 C606[0000]0F            	mov		byte[cor],branco_intenso	;borda cima (x1, y1, x2, y2)
   421 0000035B B80000                  	mov		ax,0
   422 0000035E 50                      	push		ax
   423 0000035F B8DF01                  	mov		ax,479
   424 00000362 50                      	push		ax
   425 00000363 B87F02                  	mov		ax,639
   426 00000366 50                      	push		ax
   427 00000367 B8DF01                  	mov		ax,479
   428 0000036A 50                      	push		ax
   429 0000036B E83F02                  	call line
   430 0000036E 58                      	pop ax
   431 0000036F 58                      	pop ax
   432 00000370 58                      	pop ax
   433                                  	
   434 00000371 C606[0000]0F            	mov		byte[cor],branco_intenso	;borda esquerda (x1, y1, x2, y2)
   435 00000376 B80000                  	mov		ax,0
   436 00000379 50                      	push		ax
   437 0000037A B80000                  	mov		ax,0
   438 0000037D 50                      	push		ax
   439 0000037E B80000                  	mov		ax,0
   440 00000381 50                      	push		ax
   441 00000382 B8DF01                  	mov		ax,479
   442 00000385 50                      	push		ax
   443 00000386 E82402                  	call line
   444 00000389 58                      	pop ax
   445 0000038A 58                      	pop ax
   446 0000038B 58                      	pop ax
   447                                  	
   448 0000038C C606[0000]0F            	mov		byte[cor],branco_intenso	;borda direita (x1, y1, x2, y2)
   449 00000391 B87F02                  	mov		ax,639
   450 00000394 50                      	push		ax
   451 00000395 B80000                  	mov		ax,0
   452 00000398 50                      	push		ax
   453 00000399 B87F02                  	mov		ax,639
   454 0000039C 50                      	push		ax
   455 0000039D B8DF01                  	mov		ax,479
   456 000003A0 50                      	push		ax
   457 000003A1 E80902                  	call line
   458 000003A4 58                      	pop ax
   459 000003A5 58                      	pop ax
   460 000003A6 58                      	pop ax
   461 000003A7 E99EFC                  jmp main
   462                                  
   463                                  encerra:
   464 000003AA B400                    	mov  	ah,0   			; set video mode
   465 000003AC A0[0100]                	mov  	al,[modo_anterior]   	; modo anterior
   466 000003AF CD10                    	int  	10h
   467 000003B1 B8004C                  	mov 	ax, 4c00h		; ah = 4ch
   468 000003B4 CD21                    	int 	21h
   469                                  ;***************************************************************************
   470                                  ;
   471                                  ;   fun��o cursor
   472                                  ;
   473                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   474                                  cursor:
   475 000003B6 9C                      		pushf
   476 000003B7 50                      		push 		ax
   477 000003B8 53                      		push 		bx
   478 000003B9 51                      		push		cx
   479 000003BA 52                      		push		dx
   480 000003BB 56                      		push		si
   481 000003BC 57                      		push		di
   482 000003BD 55                      		push		bp
   483 000003BE B402                    		mov     	ah,2
   484 000003C0 B700                    		mov     	bh,0
   485 000003C2 CD10                    		int     	10h
   486 000003C4 5D                      		pop		bp
   487 000003C5 5F                      		pop		di
   488 000003C6 5E                      		pop		si
   489 000003C7 5A                      		pop		dx
   490 000003C8 59                      		pop		cx
   491 000003C9 5B                      		pop		bx
   492 000003CA 58                      		pop		ax
   493 000003CB 9D                      		popf
   494 000003CC C3                      		ret
   495                                  ;_____________________________________________________________________________
   496                                  ;
   497                                  ;   fun��o caracter escrito na posi��o do cursor
   498                                  ;
   499                                  ; al= caracter a ser escrito
   500                                  ; cor definida na variavel cor
   501                                  caracter:
   502 000003CD 9C                      		pushf
   503 000003CE 50                      		push 		ax
   504 000003CF 53                      		push 		bx
   505 000003D0 51                      		push		cx
   506 000003D1 52                      		push		dx
   507 000003D2 56                      		push		si
   508 000003D3 57                      		push		di
   509 000003D4 55                      		push		bp
   510 000003D5 B409                        		mov     	ah,9
   511 000003D7 B700                        		mov     	bh,0
   512 000003D9 B90100                      		mov     	cx,1
   513 000003DC 8A1E[0000]                 		mov     	bl,[cor]
   514 000003E0 CD10                        		int     	10h
   515 000003E2 5D                      		pop		bp
   516 000003E3 5F                      		pop		di
   517 000003E4 5E                      		pop		si
   518 000003E5 5A                      		pop		dx
   519 000003E6 59                      		pop		cx
   520 000003E7 5B                      		pop		bx
   521 000003E8 58                      		pop		ax
   522 000003E9 9D                      		popf
   523 000003EA C3                      		ret
   524                                  ;_____________________________________________________________________________
   525                                  ;
   526                                  ;   fun��o plot_xy
   527                                  ;
   528                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   529                                  ; cor definida na variavel cor
   530                                  plot_xy:
   531 000003EB 55                      		push		bp
   532 000003EC 89E5                    		mov		bp,sp
   533 000003EE 9C                      		pushf
   534 000003EF 50                      		push 		ax
   535 000003F0 53                      		push 		bx
   536 000003F1 51                      		push		cx
   537 000003F2 52                      		push		dx
   538 000003F3 56                      		push		si
   539 000003F4 57                      		push		di
   540 000003F5 B40C                    	    mov     	ah,0ch
   541 000003F7 A0[0000]                	    mov     	al,[cor]
   542 000003FA B700                    	    mov     	bh,0
   543 000003FC BADF01                  	    mov     	dx,479
   544 000003FF 2B5604                  		sub		dx,[bp+4]
   545 00000402 8B4E06                  	    mov     	cx,[bp+6]
   546 00000405 CD10                    	    int     	10h
   547 00000407 5F                      		pop		di
   548 00000408 5E                      		pop		si
   549 00000409 5A                      		pop		dx
   550 0000040A 59                      		pop		cx
   551 0000040B 5B                      		pop		bx
   552 0000040C 58                      		pop		ax
   553 0000040D 9D                      		popf
   554 0000040E 5D                      		pop		bp
   555 0000040F C20400                  		ret		4
   556                                  ;_____________________________________________________________________________
   557                                  ;    fun��o circle
   558                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   559                                  ; cor definida na variavel cor
   560                                  circle:
   561 00000412 55                      	push 	bp
   562 00000413 89E5                    	mov	 	bp,sp
   563 00000415 9C                      	pushf                        ;coloca os flags na pilha
   564 00000416 50                      	push 	ax
   565 00000417 53                      	push 	bx
   566 00000418 51                      	push	cx
   567 00000419 52                      	push	dx
   568 0000041A 56                      	push	si
   569 0000041B 57                      	push	di
   570                                  	
   571 0000041C 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   572 0000041F 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   573 00000422 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   574                                  	
   575 00000425 89DA                    	mov 	dx,bx	
   576 00000427 01CA                    	add		dx,cx       ;ponto extremo superior
   577 00000429 50                      	push    ax			
   578 0000042A 52                      	push	dx
   579 0000042B E8BDFF                  	call plot_xy
   580                                  	
   581 0000042E 89DA                    	mov		dx,bx
   582 00000430 29CA                    	sub		dx,cx       ;ponto extremo inferior
   583 00000432 50                      	push    ax			
   584 00000433 52                      	push	dx
   585 00000434 E8B4FF                  	call plot_xy
   586                                  	
   587 00000437 89C2                    	mov 	dx,ax	
   588 00000439 01CA                    	add		dx,cx       ;ponto extremo direita
   589 0000043B 52                      	push    dx			
   590 0000043C 53                      	push	bx
   591 0000043D E8ABFF                  	call plot_xy
   592                                  	
   593 00000440 89C2                    	mov		dx,ax
   594 00000442 29CA                    	sub		dx,cx       ;ponto extremo esquerda
   595 00000444 52                      	push    dx			
   596 00000445 53                      	push	bx
   597 00000446 E8A2FF                  	call plot_xy
   598                                  		
   599 00000449 89CF                    	mov		di,cx
   600 0000044B 81EF0100                	sub		di,1	 ;di=r-1
   601 0000044F BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   602                                  	
   603                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   604                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   605                                  ;valores positivos para d
   606                                  
   607                                  stay:				;loop
   608 00000452 89FE                    	mov		si,di
   609 00000454 81FE0000                	cmp		si,0
   610 00000458 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   611 0000045A 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   612 0000045C D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   613 0000045E 81C60300                	add		si,3
   614 00000462 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   615 00000464 42                      	inc		dx		;incrementa dx
   616 00000465 E90E00                  	jmp		plotar
   617                                  inf:	
   618 00000468 89D6                    	mov		si,dx
   619 0000046A 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   620 0000046C D1E6                    	sal		si,1
   621 0000046E 81C60500                	add		si,5
   622 00000472 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   623 00000474 42                      	inc		dx		;incrementa x (dx)
   624 00000475 49                      	dec		cx		;decrementa y (cx)
   625                                  	
   626                                  plotar:	
   627 00000476 89D6                    	mov		si,dx
   628 00000478 01C6                    	add		si,ax
   629 0000047A 56                      	push    si			;coloca a abcisa x+xc na pilha
   630 0000047B 89CE                    	mov		si,cx
   631 0000047D 01DE                    	add		si,bx
   632 0000047F 56                      	push    si			;coloca a ordenada y+yc na pilha
   633 00000480 E868FF                  	call plot_xy		;toma conta do segundo octante
   634 00000483 89C6                    	mov		si,ax
   635 00000485 01D6                    	add		si,dx
   636 00000487 56                      	push    si			;coloca a abcisa xc+x na pilha
   637 00000488 89DE                    	mov		si,bx
   638 0000048A 29CE                    	sub		si,cx
   639 0000048C 56                      	push    si			;coloca a ordenada yc-y na pilha
   640 0000048D E85BFF                  	call plot_xy		;toma conta do s�timo octante
   641 00000490 89C6                    	mov		si,ax
   642 00000492 01CE                    	add		si,cx
   643 00000494 56                      	push    si			;coloca a abcisa xc+y na pilha
   644 00000495 89DE                    	mov		si,bx
   645 00000497 01D6                    	add		si,dx
   646 00000499 56                      	push    si			;coloca a ordenada yc+x na pilha
   647 0000049A E84EFF                  	call plot_xy		;toma conta do segundo octante
   648 0000049D 89C6                    	mov		si,ax
   649 0000049F 01CE                    	add		si,cx
   650 000004A1 56                      	push    si			;coloca a abcisa xc+y na pilha
   651 000004A2 89DE                    	mov		si,bx
   652 000004A4 29D6                    	sub		si,dx
   653 000004A6 56                      	push    si			;coloca a ordenada yc-x na pilha
   654 000004A7 E841FF                  	call plot_xy		;toma conta do oitavo octante
   655 000004AA 89C6                    	mov		si,ax
   656 000004AC 29D6                    	sub		si,dx
   657 000004AE 56                      	push    si			;coloca a abcisa xc-x na pilha
   658 000004AF 89DE                    	mov		si,bx
   659 000004B1 01CE                    	add		si,cx
   660 000004B3 56                      	push    si			;coloca a ordenada yc+y na pilha
   661 000004B4 E834FF                  	call plot_xy		;toma conta do terceiro octante
   662 000004B7 89C6                    	mov		si,ax
   663 000004B9 29D6                    	sub		si,dx
   664 000004BB 56                      	push    si			;coloca a abcisa xc-x na pilha
   665 000004BC 89DE                    	mov		si,bx
   666 000004BE 29CE                    	sub		si,cx
   667 000004C0 56                      	push    si			;coloca a ordenada yc-y na pilha
   668 000004C1 E827FF                  	call plot_xy		;toma conta do sexto octante
   669 000004C4 89C6                    	mov		si,ax
   670 000004C6 29CE                    	sub		si,cx
   671 000004C8 56                      	push    si			;coloca a abcisa xc-y na pilha
   672 000004C9 89DE                    	mov		si,bx
   673 000004CB 29D6                    	sub		si,dx
   674 000004CD 56                      	push    si			;coloca a ordenada yc-x na pilha
   675 000004CE E81AFF                  	call plot_xy		;toma conta do quinto octante
   676 000004D1 89C6                    	mov		si,ax
   677 000004D3 29CE                    	sub		si,cx
   678 000004D5 56                      	push    si			;coloca a abcisa xc-y na pilha
   679 000004D6 89DE                    	mov		si,bx
   680 000004D8 01D6                    	add		si,dx
   681 000004DA 56                      	push    si			;coloca a ordenada yc-x na pilha
   682 000004DB E80DFF                  	call plot_xy		;toma conta do quarto octante
   683                                  	
   684 000004DE 39D1                    	cmp		cx,dx
   685 000004E0 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   686 000004E2 E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   687                                  	
   688                                  	
   689                                  fim_circle:
   690 000004E5 5F                      	pop		di
   691 000004E6 5E                      	pop		si
   692 000004E7 5A                      	pop		dx
   693 000004E8 59                      	pop		cx
   694 000004E9 5B                      	pop		bx
   695 000004EA 58                      	pop		ax
   696 000004EB 9D                      	popf
   697 000004EC 5D                      	pop		bp
   698 000004ED C20600                  	ret		6
   699                                  ;-----------------------------------------------------------------------------
   700                                  ;    fun��o full_circle
   701                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   702                                  ; cor definida na variavel cor					  
   703                                  full_circle:
   704 000004F0 55                      	push 	bp
   705 000004F1 89E5                    	mov	 	bp,sp
   706 000004F3 9C                      	pushf                        ;coloca os flags na pilha
   707 000004F4 50                      	push 	ax
   708 000004F5 53                      	push 	bx
   709 000004F6 51                      	push	cx
   710 000004F7 52                      	push	dx
   711 000004F8 56                      	push	si
   712 000004F9 57                      	push	di
   713                                  
   714 000004FA 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   715 000004FD 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   716 00000500 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   717                                  	
   718 00000503 89DE                    	mov		si,bx
   719 00000505 29CE                    	sub		si,cx
   720 00000507 50                      	push    ax			;coloca xc na pilha			
   721 00000508 56                      	push	si			;coloca yc-r na pilha
   722 00000509 89DE                    	mov		si,bx
   723 0000050B 01CE                    	add		si,cx
   724 0000050D 50                      	push	ax		;coloca xc na pilha
   725 0000050E 56                      	push	si		;coloca yc+r na pilha
   726 0000050F E89B00                  	call line
   727                                  	
   728                                  		
   729 00000512 89CF                    	mov		di,cx
   730 00000514 81EF0100                	sub		di,1	 ;di=r-1
   731 00000518 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   732                                  	
   733                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   734                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   735                                  ;valores positivos para d
   736                                  
   737                                  stay_full:				;loop
   738 0000051B 89FE                    	mov		si,di
   739 0000051D 81FE0000                	cmp		si,0
   740 00000521 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   741 00000523 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   742 00000525 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   743 00000527 81C60300                	add		si,3
   744 0000052B 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   745 0000052D 42                      	inc		dx		;incrementa dx
   746 0000052E E90E00                  	jmp		plotar_full
   747                                  inf_full:	
   748 00000531 89D6                    	mov		si,dx
   749 00000533 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   750 00000535 D1E6                    	sal		si,1
   751 00000537 81C60500                	add		si,5
   752 0000053B 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   753 0000053D 42                      	inc		dx		;incrementa x (dx)
   754 0000053E 49                      	dec		cx		;decrementa y (cx)
   755                                  	
   756                                  plotar_full:	
   757 0000053F 89C6                    	mov		si,ax
   758 00000541 01CE                    	add		si,cx
   759 00000543 56                      	push	si		;coloca a abcisa y+xc na pilha			
   760 00000544 89DE                    	mov		si,bx
   761 00000546 29D6                    	sub		si,dx
   762 00000548 56                      	push    si		;coloca a ordenada yc-x na pilha
   763 00000549 89C6                    	mov		si,ax
   764 0000054B 01CE                    	add		si,cx
   765 0000054D 56                      	push	si		;coloca a abcisa y+xc na pilha	
   766 0000054E 89DE                    	mov		si,bx
   767 00000550 01D6                    	add		si,dx
   768 00000552 56                      	push    si		;coloca a ordenada yc+x na pilha	
   769 00000553 E85700                  	call 	line
   770                                  	
   771 00000556 89C6                    	mov		si,ax
   772 00000558 01D6                    	add		si,dx
   773 0000055A 56                      	push	si		;coloca a abcisa xc+x na pilha			
   774 0000055B 89DE                    	mov		si,bx
   775 0000055D 29CE                    	sub		si,cx
   776 0000055F 56                      	push    si		;coloca a ordenada yc-y na pilha
   777 00000560 89C6                    	mov		si,ax
   778 00000562 01D6                    	add		si,dx
   779 00000564 56                      	push	si		;coloca a abcisa xc+x na pilha	
   780 00000565 89DE                    	mov		si,bx
   781 00000567 01CE                    	add		si,cx
   782 00000569 56                      	push    si		;coloca a ordenada yc+y na pilha	
   783 0000056A E84000                  	call	line
   784                                  	
   785 0000056D 89C6                    	mov		si,ax
   786 0000056F 29D6                    	sub		si,dx
   787 00000571 56                      	push	si		;coloca a abcisa xc-x na pilha			
   788 00000572 89DE                    	mov		si,bx
   789 00000574 29CE                    	sub		si,cx
   790 00000576 56                      	push    si		;coloca a ordenada yc-y na pilha
   791 00000577 89C6                    	mov		si,ax
   792 00000579 29D6                    	sub		si,dx
   793 0000057B 56                      	push	si		;coloca a abcisa xc-x na pilha	
   794 0000057C 89DE                    	mov		si,bx
   795 0000057E 01CE                    	add		si,cx
   796 00000580 56                      	push    si		;coloca a ordenada yc+y na pilha	
   797 00000581 E82900                  	call	line
   798                                  	
   799 00000584 89C6                    	mov		si,ax
   800 00000586 29CE                    	sub		si,cx
   801 00000588 56                      	push	si		;coloca a abcisa xc-y na pilha			
   802 00000589 89DE                    	mov		si,bx
   803 0000058B 29D6                    	sub		si,dx
   804 0000058D 56                      	push    si		;coloca a ordenada yc-x na pilha
   805 0000058E 89C6                    	mov		si,ax
   806 00000590 29CE                    	sub		si,cx
   807 00000592 56                      	push	si		;coloca a abcisa xc-y na pilha	
   808 00000593 89DE                    	mov		si,bx
   809 00000595 01D6                    	add		si,dx
   810 00000597 56                      	push    si		;coloca a ordenada yc+x na pilha	
   811 00000598 E81200                  	call	line
   812                                  	
   813 0000059B 39D1                    	cmp		cx,dx
   814 0000059D 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   815 0000059F E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   816                                  	
   817                                  	
   818                                  fim_full_circle:
   819 000005A2 5F                      	pop		di
   820 000005A3 5E                      	pop		si
   821 000005A4 5A                      	pop		dx
   822 000005A5 59                      	pop		cx
   823 000005A6 5B                      	pop		bx
   824 000005A7 58                      	pop		ax
   825 000005A8 9D                      	popf
   826 000005A9 5D                      	pop		bp
   827 000005AA C20600                  	ret		6
   828                                  ;-----------------------------------------------------------------------------
   829                                  ;
   830                                  ;   fun��o line
   831                                  ;
   832                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   833                                  line:
   834 000005AD 55                      		push		bp
   835 000005AE 89E5                    		mov		bp,sp
   836 000005B0 9C                      		pushf                        ;coloca os flags na pilha
   837 000005B1 50                      		push 		ax
   838 000005B2 53                      		push 		bx
   839 000005B3 51                      		push		cx
   840 000005B4 52                      		push		dx
   841 000005B5 56                      		push		si
   842 000005B6 57                      		push		di
   843 000005B7 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   844 000005BA 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   845 000005BD 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   846 000005C0 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   847 000005C3 39C8                    		cmp		ax,cx
   848 000005C5 7408                    		je		line2
   849 000005C7 721C                    		jb		line1
   850 000005C9 91                      		xchg		ax,cx
   851 000005CA 87DA                    		xchg		bx,dx
   852 000005CC E91600                  		jmp		line1
   853                                  line2:		; deltax=0
   854 000005CF 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   855 000005D1 7202                    		jb		line3
   856 000005D3 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   857                                  line3:	; dx > bx
   858 000005D5 50                      		push		ax
   859 000005D6 53                      		push		bx
   860 000005D7 E811FE                  		call 		plot_xy
   861 000005DA 39D3                    		cmp		bx,dx
   862 000005DC 7503                    		jne		line31
   863 000005DE E9C600                  		jmp		fim_line
   864 000005E1 43                      line31:		inc		bx
   865 000005E2 E9F0FF                  		jmp		line3
   866                                  ;deltax <>0
   867                                  line1:
   868                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   869                                  	; cx > ax
   870 000005E5 51                      		push		cx
   871 000005E6 29C1                    		sub		cx,ax
   872 000005E8 890E[0600]              		mov		[deltax],cx
   873 000005EC 59                      		pop		cx
   874 000005ED 52                      		push		dx
   875 000005EE 29DA                    		sub		dx,bx
   876 000005F0 7702                    		ja		line32
   877 000005F2 F7DA                    		neg		dx
   878                                  line32:		
   879 000005F4 8916[0800]              		mov		[deltay],dx
   880 000005F8 5A                      		pop		dx
   881                                  
   882 000005F9 50                      		push		ax
   883 000005FA A1[0600]                		mov		ax,[deltax]
   884 000005FD 3B06[0800]              		cmp		ax,[deltay]
   885 00000601 58                      		pop		ax
   886 00000602 724D                    		jb		line5
   887                                  
   888                                  	; cx > ax e deltax>deltay
   889 00000604 51                      		push		cx
   890 00000605 29C1                    		sub		cx,ax
   891 00000607 890E[0600]              		mov		[deltax],cx
   892 0000060B 59                      		pop		cx
   893 0000060C 52                      		push		dx
   894 0000060D 29DA                    		sub		dx,bx
   895 0000060F 8916[0800]              		mov		[deltay],dx
   896 00000613 5A                      		pop		dx
   897                                  
   898 00000614 89C6                    		mov		si,ax
   899                                  line4:
   900 00000616 50                      		push		ax
   901 00000617 52                      		push		dx
   902 00000618 56                      		push		si
   903 00000619 29C6                    		sub		si,ax	;(x-x1)
   904 0000061B A1[0800]                		mov		ax,[deltay]
   905 0000061E F7EE                    		imul		si
   906 00000620 8B36[0600]              		mov		si,[deltax]		;arredondar
   907 00000624 D1EE                    		shr		si,1
   908                                  ; se numerador (DX)>0 soma se <0 subtrai
   909 00000626 81FA0000                		cmp		dx,0
   910 0000062A 7C09                    		jl		ar1
   911 0000062C 01F0                    		add		ax,si
   912 0000062E 81D20000                		adc		dx,0
   913 00000632 E90600                  		jmp		arc1
   914 00000635 29F0                    ar1:		sub		ax,si
   915 00000637 81DA0000                		sbb		dx,0
   916                                  arc1:
   917 0000063B F73E[0600]              		idiv		word [deltax]
   918 0000063F 01D8                    		add		ax,bx
   919 00000641 5E                      		pop		si
   920 00000642 56                      		push		si
   921 00000643 50                      		push		ax
   922 00000644 E8A4FD                  		call		plot_xy
   923 00000647 5A                      		pop		dx
   924 00000648 58                      		pop		ax
   925 00000649 39CE                    		cmp		si,cx
   926 0000064B 745A                    		je		fim_line
   927 0000064D 46                      		inc		si
   928 0000064E E9C5FF                  		jmp		line4
   929                                  
   930 00000651 39D3                    line5:		cmp		bx,dx
   931 00000653 7203                    		jb 		line7
   932 00000655 91                      		xchg		ax,cx
   933 00000656 87DA                    		xchg		bx,dx
   934                                  line7:
   935 00000658 51                      		push		cx
   936 00000659 29C1                    		sub		cx,ax
   937 0000065B 890E[0600]              		mov		[deltax],cx
   938 0000065F 59                      		pop		cx
   939 00000660 52                      		push		dx
   940 00000661 29DA                    		sub		dx,bx
   941 00000663 8916[0800]              		mov		[deltay],dx
   942 00000667 5A                      		pop		dx
   943                                  
   944                                  
   945                                  
   946 00000668 89DE                    		mov		si,bx
   947                                  line6:
   948 0000066A 52                      		push		dx
   949 0000066B 56                      		push		si
   950 0000066C 50                      		push		ax
   951 0000066D 29DE                    		sub		si,bx	;(y-y1)
   952 0000066F A1[0600]                		mov		ax,[deltax]
   953 00000672 F7EE                    		imul		si
   954 00000674 8B36[0800]              		mov		si,[deltay]		;arredondar
   955 00000678 D1EE                    		shr		si,1
   956                                  ; se numerador (DX)>0 soma se <0 subtrai
   957 0000067A 81FA0000                		cmp		dx,0
   958 0000067E 7C09                    		jl		ar2
   959 00000680 01F0                    		add		ax,si
   960 00000682 81D20000                		adc		dx,0
   961 00000686 E90600                  		jmp		arc2
   962 00000689 29F0                    ar2:		sub		ax,si
   963 0000068B 81DA0000                		sbb		dx,0
   964                                  arc2:
   965 0000068F F73E[0800]              		idiv		word [deltay]
   966 00000693 89C7                    		mov		di,ax
   967 00000695 58                      		pop		ax
   968 00000696 01C7                    		add		di,ax
   969 00000698 5E                      		pop		si
   970 00000699 57                      		push		di
   971 0000069A 56                      		push		si
   972 0000069B E84DFD                  		call		plot_xy
   973 0000069E 5A                      		pop		dx
   974 0000069F 39D6                    		cmp		si,dx
   975 000006A1 7404                    		je		fim_line
   976 000006A3 46                      		inc		si
   977 000006A4 E9C3FF                  		jmp		line6
   978                                  
   979                                  fim_line:
   980 000006A7 5F                      		pop		di
   981 000006A8 5E                      		pop		si
   982 000006A9 5A                      		pop		dx
   983 000006AA 59                      		pop		cx
   984 000006AB 5B                      		pop		bx
   985 000006AC 58                      		pop		ax
   986 000006AD 9D                      		popf
   987 000006AE 5D                      		pop		bp
   988 000006AF C20800                  		ret		8
   989                                  
   990                                  ;*******************************************************************
   991                                  segment data
   992                                  
   993 00000000 0F                      cor		db		branco_intenso
   994                                  
   995                                  ;	I R G B COR
   996                                  ;	0 0 0 0 preto
   997                                  ;	0 0 0 1 azul
   998                                  ;	0 0 1 0 verde
   999                                  ;	0 0 1 1 cyan
  1000                                  ;	0 1 0 0 vermelho
  1001                                  ;	0 1 0 1 magenta
  1002                                  ;	0 1 1 0 marrom
  1003                                  ;	0 1 1 1 branco
  1004                                  ;	1 0 0 0 cinza
  1005                                  ;	1 0 0 1 azul claro
  1006                                  ;	1 0 1 0 verde claro
  1007                                  ;	1 0 1 1 cyan claro
  1008                                  ;	1 1 0 0 rosa
  1009                                  ;	1 1 0 1 magenta claro
  1010                                  ;	1 1 1 0 amarelo
  1011                                  ;	1 1 1 1 branco intenso
  1012                                  
  1013                                  preto		equ		0
  1014                                  azul		equ		1
  1015                                  verde		equ		2
  1016                                  cyan		equ		3
  1017                                  vermelho	equ		4
  1018                                  magenta		equ		5
  1019                                  marrom		equ		6
  1020                                  branco		equ		7
  1021                                  cinza		equ		8
  1022                                  azul_claro	equ		9
  1023                                  verde_claro	equ		10
  1024                                  cyan_claro	equ		11
  1025                                  rosa		equ		12
  1026                                  magenta_claro	equ		13
  1027                                  amarelo		equ		14
  1028                                  branco_intenso	equ		15
  1029                                  
  1030 00000001 00                      modo_anterior	db		0
  1031 00000002 0000                    linha   	dw  		0
  1032 00000004 0000                    coluna  	dw  		0
  1033 00000006 0000                    deltax		dw		0
  1034 00000008 0000                    deltay		dw		0	
  1035 0000000A 45786572636963696F-     mens1    	db  'Exercicio de Programacao de Sistemas Embarcados 1 - 2023/2'
  1036 00000013 2064652050726F6772-
  1037 0000001C 616D6163616F206465-
  1038 00000025 2053697374656D6173-
  1039 0000002E 20456D626172636164-
  1040 00000037 6F732031202D203230-
  1041 00000040 32332F32           
  1042 00000044 417274687572204261-     mens2		db	'Arthur Bandeira Salvador 00 X 00 Computador   Velocidade (1/3)'
  1043 0000004D 6E6465697261205361-
  1044 00000056 6C7661646F72203030-
  1045 0000005F 205820303020436F6D-
  1046 00000068 70757461646F722020-
  1047 00000071 2056656C6F63696461-
  1048 0000007A 64652028312F3329   
  1049                                  
  1050 00000082 0400                    vx			dw	4
  1051 00000084 0400                    vy			dw	4
  1052 00000086 0400                    vatual 		dw	4
  1053 00000088 01                      v_printa_int	db	1
  1054 00000089 3124                    v_printa_str	db	'1', '$'
  1055 0000008B D600                    raqi		dw	214
  1056 0000008D FE00                    raqf		dw	254
  1057                                  
  1058 0000008F 0000                    ponto_play	dw	0			;variáveis para contagem
  1059 00000091 0000                    ponto_pc	dw	0
  1060 00000093 3030                    pnt_play_str	db	'00'	;variáveis para printar
  1061 00000095 3030                    pnt_pc_str		db	'00'
  1062                                  ;*************************************************************************
  1063                                  segment stack stack
  1064 00000000 <res 00000200>              		resb 		512
  1065                                  stacktop:
